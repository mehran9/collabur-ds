/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { backToTopFloatProps, buttonColorProp, colorProp, columnGapProps, columnSizes, footerDisclaimerPositionProps, footerLayoutProps, headingSizeProp, heroOverlayProps, heroSizeProps, iconProp, imageRatioProps, imageSizeProps, notificationPositionProp, notificationTypeProp, positionLocationsProp, signInBoxSizeProps, textAlignmentProp, textColorProp, textFontFamilieProp, textTransformationProp, textWeightProp, tooltipPlacementProp, tooltipTriggerProp, typographySizeProp } from "./core/types";
import { SignInData } from "./patterns/sign-in/sign-in";
export namespace Components {
    interface CdsAccordion {
        /**
          * Icon alignment - left or right position of toggle icon
         */
        "iconAlign": 'left' | 'right';
        /**
          * Enable multiple accordion items to be open at the same time
         */
        "openMultipleItems": boolean;
    }
    interface CdsAccordionItem {
        /**
          * Drawer title
         */
        "drawerTitle": string;
        /**
          * iconAlignment
         */
        "iconAlign": string;
        /**
          * isOpen
         */
        "open": boolean;
    }
    interface CdsAvatar {
        /**
          * background color
         */
        "background": colorProp;
        /**
          * CSS classes
         */
        "class": string;
        /**
          * Avatar icon
         */
        "icon": iconProp;
        /**
          * Avatar image
          * @imageUploader 
          * @imageMaxWidth 300px
          * @imageMaxHeight 300px
          * @imageMinWidth 150px
          * @imageMinHeight 150px
          * @imageExt .jpg, .png
         */
        "image": string;
        /**
          * Avatar initials
         */
        "initials": string;
        /**
          * Size
         */
        "size": imageSizeProps;
    }
    interface CdsBackToTop {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Color
         */
        "color": colorProp;
        /**
          * Float Position
         */
        "floatPosition": backToTopFloatProps;
        /**
          * Icon
         */
        "icon": iconProp;
        /**
          * Light
         */
        "light": boolean;
    }
    interface CdsBanner {
        /**
          * Action Color
         */
        "actionColor": buttonColorProp;
        /**
          * Action Link
         */
        "actionLink": string;
        /**
          * Action Text
         */
        "actionText": string;
        /**
          * CSS Class
         */
        "class": string;
        /**
          * color
         */
        "color": colorProp;
        /**
          * Is Light
         */
        "light": boolean;
        /**
          * Position
         */
        "position": 'float-top' | 'float-bottom' | 'fixed-top' | 'fixed-bottom';
        /**
          * Show
         */
        "show": boolean;
    }
    interface CdsBox {
        /**
          * CSS classes
         */
        "class": string;
    }
    interface CdsBrandFavicon {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Height (px)
         */
        "height"?: number;
        /**
          * Size
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Variant
         */
        "variant": typeof generatedBrands.favicon[number];
        /**
          * Width (px)
         */
        "width"?: number;
    }
    interface CdsBrandIcon {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Height (px)
         */
        "height"?: number;
        /**
          * Size
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Variant
         */
        "variant": typeof generatedBrands.icons[number];
        /**
          * Width (px)
         */
        "width"?: number;
    }
    interface CdsBrandLogo {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Height (px)
         */
        "height"?: number;
        /**
          * Size
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Variant
         */
        "variant": typeof generatedBrands.logos[number];
        /**
          * Width (px)
         */
        "width"?: number;
    }
    interface CdsBreadcrumb {
        /**
          * Breadcrumb alignment
         */
        "align": 'centered' | 'right';
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Separator
         */
        "separator": | 'has-arrow-separator'
    | 'has-bullet-separator'
    | 'has-dot-separator'
    | 'has-succeeds-separator';
        /**
          * Size
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface CdsButton {
        /**
          * Active state
         */
        "active": boolean;
        /**
          * CSS classes
         */
        "class": string;
        /**
          * Color
         */
        "color": buttonColorProp;
        /**
          * Is disabled?
         */
        "disabled": boolean;
        /**
          * Focused state
         */
        "focused": boolean;
        /**
          * Display the button in full-width
         */
        "fullwidth": boolean;
        /**
          * Hovered state
         */
        "hovered": boolean;
        /**
          * Link href
         */
        "href": string;
        /**
          * Is inverted
         */
        "inverted": boolean;
        /**
          * Is light color variant
         */
        "light": boolean;
        /**
          * Loading state
         */
        "loading": boolean;
        /**
          * Is outlined
         */
        "outlined": boolean;
        /**
          * Rounded button
         */
        "rounded": boolean;
        /**
          * Size
         */
        "size": 'small' | 'medium' | 'large' | 'normal';
        /**
          * Element tag to render
         */
        "tag": 'a' | 'button' | 'input';
        /**
          * Button or input type
         */
        "type": 'submit' | 'reset' | 'button';
    }
    interface CdsButtons {
        /**
          * Attached button alignment
         */
        "align": 'center' | 'right';
        /**
          * CSS classes
         */
        "class": string;
        /**
          * Attach buttons together
         */
        "hasAddons": boolean;
        /**
          * Buttons size
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface CdsCalendar {
        /**
          * Format
         */
        "format": string;
        /**
          * Set Date
          * @param value date
         */
        "setDate": (value: Date) => Promise<void>;
        /**
          * Show Calendar
         */
        "show": boolean;
        /**
          * value
         */
        "value": string;
    }
    interface CdsCalendarContainer {
        /**
          * Selected Date
         */
        "currentDate": Date;
    }
    interface CdsCalendarContent {
        /**
          * Current Date
         */
        "currentDate": Date;
        /**
          * Display Date (Current Display Month)
         */
        "displayDate": Date;
        /**
          * Position
         */
        "position": 'current' | 'prevContent' | 'nextContent';
        /**
          * view
         */
        "view": 'days' | 'months' | 'years';
    }
    interface CdsCalendarInput {
        /**
          * Disabled state
         */
        "disabled": boolean;
        /**
          * Format
         */
        "format": string;
        /**
          * inputAttributes - adds custom attributes to the input field declared attributes will be overridden
         */
        "inputAttributes": any;
        /**
          * Unique id (used in input and label)
         */
        "inputId": string;
        /**
          * Input status
         */
        "inputStatus": 'success' | 'danger';
        /**
          * Label for input
         */
        "label": string;
        /**
          * Loading state
         */
        "loading": boolean;
        /**
          * Message
         */
        "message": string;
        /**
          * Name
         */
        "name": string;
        /**
          * Placeholder
         */
        "placeholder": string;
        /**
          * The input will look similar to a normal one, but is not editable and has no shadow
         */
        "readonly": boolean;
        /**
          * Required
         */
        "required": boolean;
        /**
          * Rounded
         */
        "rounded": boolean;
        /**
          * Set Date
          * @param value date
         */
        "setDate": (value: Date) => Promise<void>;
        /**
          * Show Calendar
         */
        "show": boolean;
        /**
          * Size
         */
        "size": 'small' | 'normal' | 'medium' | 'large';
        /**
          * State
         */
        "state": 'hovered' | 'focused';
        /**
          * Removes the background, border, shadow, and horizontal padding
         */
        "static": boolean;
        /**
          * value
         */
        "value": string;
    }
    interface CdsCard {
        /**
          * CSS Classes
         */
        "class": string;
    }
    interface CdsCardContent {
        /**
          * CSS Classes
         */
        "class": string;
    }
    interface CdsCardFooter {
        /**
          * CSS Classes
         */
        "class": string;
    }
    interface CdsCardGrid {
        /**
          * Card description
         */
        "cardDescription": string;
        /**
          * Card title
         */
        "cardTitle": string;
        /**
          * Card icon
         */
        "icon": string;
        /**
          * Card img
         */
        "img": string;
        /**
          * Card link
         */
        "link": string;
    }
    interface CdsCardHeader {
        /**
          * CSS Classes
         */
        "class": string;
    }
    interface CdsCardImage {
        /**
          * CSS Classes
         */
        "class": string;
    }
    interface CdsCarousel {
        /**
          * 'default'
         */
        "carouselType": 'default' | 'on-boarding' | 'slider' | 'fixed-width';
        /**
          * Fixes width of slide to pixels Used to customise the width of the  'offer-card' type carousel
         */
        "fixedWidthPixels": number;
        /**
          * Gradient colour (as rgb values eg '255, 255, 255')
         */
        "gradientColourRgb": string;
        /**
          * Heading that sits on top of carousel
         */
        "heading": string;
        /**
          * Hide pagination on mobiles
         */
        "hidePaginationMobile": boolean;
        /**
          * Hide prev/next buttons for mobile devies
         */
        "hidePrevNextForMobile": true;
        /**
          * Padding bottom on carousel scroller
         */
        "scrollerPaddingBottom": string;
        /**
          * Show dismiss link
         */
        "showDismiss": boolean;
        /**
          * Show pagination
         */
        "showPagination": boolean;
        /**
          * Show prev and next buttons
         */
        "showPrevNext": boolean;
        /**
          * Show gradient under previous / next buttons
         */
        "showPrevNextGradient": false;
        /**
          * Slides (only applicable for on-boarding and slider carousel types)
         */
        "slides": string;
    }
    interface CdsCheckbox {
        /**
          * Id
         */
        "checkboxId": any;
        /**
          * Name
         */
        "checkboxName": any;
        /**
          * Checked
         */
        "checked": boolean;
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Disabled
         */
        "disabled": boolean;
        /**
          * Label classes
         */
        "labelClass": string;
    }
    interface CdsColumn {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Narrow column
         */
        "narrow": boolean;
        /**
          * Sizes
         */
        "size": columnSizes;
    }
    interface CdsColumns {
        /**
          * Centered
         */
        "centered": boolean;
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Desktop
         */
        "desktop": boolean;
        /**
          * Gapless
         */
        "gapless": boolean;
        /**
          * Columns gaps
         */
        "gaps": columnGapProps;
        /**
          * Mobile
         */
        "mobile": boolean;
        /**
          * Multiline
         */
        "multiline": boolean;
        /**
          * Vertically centered
         */
        "vcentered": boolean;
    }
    interface CdsContainer {
        /**
          * Container breakpoint
         */
        "breakpoint": 'desktop' | 'widescreen' | 'fullhd';
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Fluid container
         */
        "fluid": boolean;
    }
    interface CdsContent {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Content size
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface CdsCookieConsent {
        /**
          * accessible label
         */
        "accessibleLabel": string;
        /**
          * background
         */
        "background": colorProp;
        /**
          * button color
         */
        "buttonColor": colorProp;
        /**
          * button text
         */
        "buttonText": string;
        /**
          * CSS classes
         */
        "class": string;
        /**
          * position
         */
        "position": 'top' | 'bottom' | 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
        /**
          * show
         */
        "show": boolean;
    }
    interface CdsDivider {
        /**
          * CSS classes
         */
        "class": string;
    }
    interface CdsDropdown {
        /**
          * The dropdown visibility
         */
        "active": boolean;
        /**
          * Align the dropdown to the center
         */
        "center": boolean;
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Fullwidth
         */
        "fullwidth": boolean;
        /**
          * The dropdown will show up when hovering the dropdown-trigger
         */
        "hoverable": boolean;
        /**
          * Align the dropdown to the right
         */
        "right": boolean;
        /**
          * Dropdown menu that appears above the dropdown button
         */
        "up": boolean;
    }
    interface CdsFeature {
        /**
          * CSS classes
         */
        "class": string;
        /**
          * layout
         */
        "layout": 'left' | 'right' | 'stack';
    }
    interface CdsFeatureHeader {
        /**
          * align
         */
        "align": 'left' | 'right' | 'center';
        /**
          * CSS classes
         */
        "class": string;
        /**
          * size
         */
        "size": 'small' | 'normal' | 'medium' | 'large';
    }
    interface CdsFeatureItem {
        /**
          * CSS classes
         */
        "class": string;
        /**
          * description
         */
        "description": string;
        /**
          * heading
         */
        "heading": string;
        /**
          * icon
         */
        "icon": iconProp;
        /**
          * icon color
         */
        "iconColor": colorProp;
        /**
          * icon inverted
         */
        "iconInverted": boolean;
        /**
          * icon light
         */
        "iconLight": boolean;
        /**
          * icon outlined
         */
        "iconOutlined": boolean;
        /**
          * icon size
         */
        "iconSize": 'small' | 'medium' | 'large';
        /**
          * is icon background
         */
        "iconWithBackground": boolean;
        /**
          * layout
         */
        "layout": 'stack' | 'stack-center' | 'horizontal';
    }
    interface CdsField {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Grouped field
         */
        "grouped": boolean;
        /**
          * Grouped, on multiline
         */
        "groupedMultiline": boolean;
        /**
          * Has addons
         */
        "hasAddons": boolean;
        /**
          * Horizontal field
         */
        "horizontal": boolean;
        /**
          * Label
         */
        "label": string;
        /**
          * Help or error message
         */
        "message": string;
        /**
          * Field size
         */
        "size": 'small' | 'normal' | 'medium' | 'large';
    }
    interface CdsFile {
        /**
          * Alignment
         */
        "align": 'left' | 'centered' | 'right';
        /**
          * Boxed block
         */
        "boxed": boolean;
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Color
         */
        "color": colorProp;
        /**
          * File
         */
        "file": File;
        /**
          * Expand the name to fill up the space
         */
        "fullwidth": boolean;
        /**
          * Add a placeholder for the selected file name
         */
        "hasName": boolean;
        /**
          * Name
         */
        "name": string;
        /**
          * Placeholder
         */
        "placeholder": string;
        /**
          * Move the CTA to the right side
         */
        "right": boolean;
        /**
          * Size
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface CdsFileInput {
        /**
          * File types allowed
         */
        "accept": string;
        /**
          * Add class to the 'Add' button
         */
        "addButtonClass": string;
        /**
          * Add button label
         */
        "addButtonLabel": string;
        /**
          * Enable drag drop file input
         */
        "dragDrop": boolean;
        /**
          * Drag drop instruction
         */
        "dragDropText": string;
        /**
          * Icon name
         */
        "icon": iconProp;
        /**
          * id of input field
         */
        "inputId": string;
        /**
          * Label description
         */
        "labelDescription": string;
        /**
          * Label title
         */
        "labelTitle": string;
        /**
          * Allow multiple files
         */
        "multiple": boolean;
    }
    interface CdsFooter {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Color
         */
        "color": 'dark' | 'white';
        /**
          * Disclaimer
         */
        "disclaimer": string;
        /**
          * Social Links Position
         */
        "disclaimerPosition": footerDisclaimerPositionProps;
        /**
          * layout
         */
        "layout": footerLayoutProps;
        /**
          * Links
         */
        "links": string;
        /**
          * Social Links below footer content box
         */
        "socialBelowContent": boolean;
        /**
          * Social Links
         */
        "socialLinks": string;
    }
    interface CdsGrid {
        /**
          * align
         */
        "align": 'left' | 'right' | 'center';
        /**
          * CSS classes
         */
        "class": string;
        /**
          * Number of Columns
         */
        "columns": '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12';
        /**
          * Gap
         */
        "gap": '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8';
        /**
          * Vertical Gap
         */
        "verticalGap": '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8';
    }
    interface CdsGridItem {
        /**
          * CSS classes
         */
        "class": string;
    }
    interface CdsHeading {
        /**
          * Alignment
         */
        "align": textAlignmentProp;
        /**
          * CSS classes
         */
        "class": string;
        /**
          * Color
         */
        "color": textColorProp;
        /**
          * Font Family
         */
        "fontFamily": textFontFamilieProp;
        /**
          * No Margin
         */
        "noMargin": boolean;
        /**
          * Size
         */
        "size": headingSizeProp;
        /**
          * Is Subtitle
         */
        "subtitle": boolean;
        /**
          * Transform
         */
        "transform": textTransformationProp;
        /**
          * Font Weight
         */
        "weight": textWeightProp;
    }
    interface CdsHero {
        /**
          * Copy
         */
        "copy": string;
        /**
          * Copy Color
         */
        "copyColor": textColorProp;
        /**
          * Heading
         */
        "heading": string;
        /**
          * Heading Color
         */
        "headingColor": textColorProp;
        /**
          * Background image url
          * @imageUploader 
          * @imageMinWidth 1500px
          * @imageMinHeight 1000px
          * @imageExt .jpg, .png
         */
        "image": string;
        /**
          * Background overlay
         */
        "overlay": heroOverlayProps;
        /**
          * Primary Action
         */
        "primaryAction": string;
        /**
          * Secondary Action
         */
        "secondaryAction": string;
        /**
          * Size
         */
        "size": heroSizeProps;
        /**
          * Video url
         */
        "video": string;
        /**
          * Video embedded
         */
        "videoEmbedded": boolean;
    }
    interface CdsIcon {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Color
         */
        "color": colorProp;
        /**
          * Icon name (svg file name)
         */
        "icon": iconProp;
        /**
          * Size
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface CdsImage {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Ratio
         */
        "ratio": imageRatioProps;
        /**
          * Size
         */
        "size": imageSizeProps;
    }
    interface CdsInput {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Control Classes eg. has-icons
         */
        "controlClass": string;
        /**
          * Disabled state
         */
        "disabled": boolean;
        /**
          * inputAttributes - adds custom attributes to the input field declared attributes will be overridden
         */
        "inputAttributes": any;
        /**
          * Unique id (used in input and label)
         */
        "inputId": string;
        /**
          * Input status
         */
        "inputStatus": 'success' | 'danger';
        /**
          * Label for input
         */
        "label": string;
        /**
          * Loading state
         */
        "loading": boolean;
        /**
          * Message
         */
        "message": string;
        /**
          * Name
         */
        "name": string;
        /**
          * Placeholder
         */
        "placeholder": string;
        /**
          * The input will look similar to a normal one, but is not editable and has no shadow
         */
        "readonly": boolean;
        /**
          * Required
         */
        "required": boolean;
        /**
          * Rounded
         */
        "rounded": boolean;
        /**
          * Size
         */
        "size": 'small' | 'normal' | 'medium' | 'large';
        /**
          * State
         */
        "state": 'hovered' | 'focused';
        /**
          * Removes the background, border, shadow, and horizontal padding
         */
        "static": boolean;
        /**
          * Type
         */
        "type": 'text' | 'number' | 'email' | 'password' | 'date';
        /**
          * Value
         */
        "value": string | number;
    }
    interface CdsListBlock {
        /**
          * Adds horizontal border between list-block-items
         */
        "border": true;
        /**
          * Icon alignment - left, right
         */
        "iconAlign": string;
        /**
          * Array of ListBlockItem ( text, icon, backgroundClass, textClass)
         */
        "listBlockItems": string;
    }
    interface CdsListBlockItem {
        /**
          * Background color - used to generate bulma class name ie. has-background-COLOUR
         */
        "backgroundColour": string;
        /**
          * Icon
         */
        "icon": iconProp;
        /**
          * Icon alignment - left, right
         */
        "iconAlign": string;
        /**
          * Id (for event emission)
         */
        "listBlockItemId": string;
        /**
          * Text of list item
         */
        "text": string;
        /**
          * Text color class - used to generate bulma class name ie. has-text-COLOUR
         */
        "textColour": string;
    }
    interface CdsLoadingIndicator {
        /**
          * Blur Content: show loading spinner over content slot
         */
        "blurContent": boolean;
        /**
          * CSS Class
         */
        "class": string;
        /**
          * Color
         */
        "color": colorProp;
        /**
          * Fullscreen
         */
        "fullscreen": boolean;
        /**
          * Show
         */
        "show": boolean;
        /**
          * Size
         */
        "size": 'small' | 'normal' | 'medium' | 'large';
    }
    interface CdsLogo {
        /**
          * Logo's alignment
         */
        "alignment": string;
        /**
          * Logo's colour
         */
        "colour": string;
        /**
          * Logo's size
         */
        "size": 'small' | 'normal' | 'medium' | 'large' | 'extra-large';
    }
    interface CdsLottieAnimation {
        /**
          * Path to animation JSON file
         */
        "animationPath": string;
        /**
          * Autoplay option
         */
        "autoplay": boolean;
        /**
          * Height
         */
        "height": string;
        /**
          * Loop option
         */
        "loop": boolean;
        /**
          * Width
         */
        "width": string;
    }
    interface CdsMenu {
        /**
          * Active Subnav Item path
         */
        "activeItemPath": string;
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Subnav
         */
        "subnav": string;
    }
    interface CdsMessage {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Color
         */
        "color": colorProp;
        /**
          * Size
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface CdsModal {
        /**
          * Is Active
         */
        "active": boolean;
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Modal Card
         */
        "hasModalCard": boolean;
    }
    interface CdsNavbar {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Color
         */
        "color": colorProp;
        /**
          * Fixed position
         */
        "fixedPosition": 'is-fixed-top' | 'is-fixed-bottom';
        /**
          * Logo Image
          * @imageUploader 
          * @imageMaxWidth 500px
          * @imageMaxHeight 500px
          * @imageMinWidth 300px
          * @imageMinHeight 300px
          * @imageExt .jpg, .png
         */
        "logoImage": string;
        /**
          * Logo Link
         */
        "logoLink": string;
        /**
          * Mobile Menu Open
         */
        "mobileMenuOpen": boolean;
        /**
          * Spaced
         */
        "spaced": boolean;
        /**
          * Transparent
         */
        "transparent": boolean;
    }
    interface CdsNavbarDropdown {
        /**
          * The dropdown visibility
         */
        "active": boolean;
        /**
          * Heading
         */
        "heading": string;
        /**
          * The dropdown will show up when hovering the dropdown-trigger
         */
        "hoverable": boolean;
        /**
          * Is Tab style
         */
        "isTab": boolean;
        /**
          * Dropdown Position
         */
        "position": 'left' | 'right' | 'center';
        /**
          * Size
         */
        "size": 'normal' | 'large' | 'fullwidth';
    }
    interface CdsNavbarDropdownItem {
        /**
          * Description
         */
        "description": string;
        /**
          * Heading
         */
        "heading": string;
        /**
          * Icon
         */
        "icon": iconProp;
        /**
          * Icon Background Style
         */
        "iconBackgroundStyle": 'transparent' | 'solid' | 'light';
        /**
          * Icon Color
         */
        "iconColor": colorProp;
        /**
          * Layout
         */
        "layout": 'horizontal' | 'stack';
        /**
          * Heading
         */
        "link": string;
    }
    interface CdsNotification {
        /**
          * Notification content alignment
         */
        "alignContent": 'left' | 'right' | 'center';
        /**
          * Notification position
         */
        "animated": string;
        /**
          * Bottom placement in pixels (default is 0px)
         */
        "bottomPosition": string;
        /**
          * Call to action label
         */
        "cta": string;
        /**
          * Call to action target
         */
        "ctaTarget": '_self' | '_blank' | 'emit';
        /**
          * Call to action type
         */
        "ctaType": notificationTypeProp;
        /**
          * Call to action URL
         */
        "ctaUrl": string;
        /**
          * Is dismissable
         */
        "dismissable": boolean;
        /**
          * Is dismissed
         */
        "dismissed": boolean;
        /**
          * Heading of the notification
         */
        "heading": string;
        /**
          * Heading icon (font awesome icon)
         */
        "icon": iconProp;
        /**
          * ID
         */
        "notificationId": string;
        /**
          * Notification type
         */
        "notificationType": notificationTypeProp;
        /**
          * Notification position
         */
        "position": notificationPositionProp;
        /**
          * This reduces the heading size two levels on mobile viewports
         */
        "responsiveHeading": boolean;
        /**
          * Rounded Corners
         */
        "rounded": boolean;
        /**
          * Text of the notification
         */
        "text": string;
        /**
          * Display as a toast notification with appropriate accessibility attributes
         */
        "toast": boolean;
        /**
          * Top placement in pixels (default is 0px)
         */
        "topPosition": string;
    }
    interface CdsPagination {
        /**
          * Alignment
         */
        "align": 'centered' | 'right';
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Rounded
         */
        "rounded": boolean;
        /**
          * Pagination size
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface CdsPanel {
        /**
          * CSS Classes
         */
        "class": string;
    }
    interface CdsProgress {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Color
         */
        "color": colorProp;
        /**
          * Light
         */
        "light": boolean;
        /**
          * type
         */
        "lottiePath": string;
        /**
          * Maximum value
         */
        "max": number;
        /**
          * Size
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * type
         */
        "type": 'circle' | 'lottie' | 'bar';
        /**
          * Value
         */
        "value": number;
    }
    interface CdsQuote {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Footer
         */
        "footer": any;
    }
    interface CdsRadio {
        /**
          * Checked
         */
        "checked": boolean;
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Disabled
         */
        "disabled": boolean;
        /**
          * Label Classes
         */
        "labelClass": string;
        /**
          * Id
         */
        "radioId": string;
        /**
          * Name
         */
        "radioName": string;
    }
    interface CdsRange {
        /**
          * label
         */
        "label": string;
        /**
          * max
         */
        "max": number;
        /**
          * min
         */
        "min": number;
        /**
          * step
         */
        "step": number;
        /**
          * Value
         */
        "value": number;
    }
    interface CdsSection {
        /**
          * background
         */
        "background": colorProp;
        /**
          * CSS classes
         */
        "class": string;
        /**
          * Light
         */
        "light": boolean;
        /**
          * Section size
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface CdsSelect {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Color
         */
        "color": colorProp;
        /**
          * Control classes
         */
        "controlClass": string;
        /**
          * Icon
         */
        "icon": iconProp;
        /**
          * Label for select
         */
        "label": string;
        /**
          * Loading state
         */
        "loading": boolean;
        /**
          * Message
         */
        "message": string;
        /**
          * Allows multiple selection
         */
        "multiple": boolean;
        /**
          * Rounded
         */
        "rounded": boolean;
        /**
          * Select id
         */
        "selectId": string;
        /**
          * Select name
         */
        "selectName": string;
        /**
          * Select status
         */
        "selectStatus": 'success' | 'danger';
        /**
          * Size
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * State
         */
        "state": 'hovered' | 'focused';
    }
    interface CdsSidebar {
        /**
          * Active Subnav Item path
         */
        "activeItemPath": string;
        /**
          * Logo href
         */
        "logoHref": string;
        /**
          * Logo image path
          * @imageUploader 
          * @imageMaxWidth 500px
          * @imageMaxHeight 500px
          * @imageMinWidth 300px
          * @imageMinHeight 300px
          * @imageExt .jpg, .png
         */
        "logoPath": string;
        /**
          * Slide out duration
         */
        "slideoutDuration": number;
        /**
          * Subnav
         */
        "subnav": string;
        /**
          * Title
         */
        "subnavTitle": string;
    }
    interface CdsSignIn {
        /**
          * button label
         */
        "buttonLabel": string;
        /**
          * CSS classes
         */
        "class": string;
        /**
          * control size
         */
        "controlSize": 'small' | 'normal' | 'medium' | 'large';
        /**
          * current Data
         */
        "currentData": SignInData;
        /**
          * forgot password label
         */
        "forgotPasswordLabel": string;
        /**
          * heading
         */
        "heading": string;
        /**
          * password label
         */
        "passwordLabel": string;
        /**
          * password placeholder
         */
        "passwordPlaceholder": string;
        /**
          * remember label
         */
        "rememberLabel": string;
        /**
          * size
         */
        "size": signInBoxSizeProps;
        /**
          * username label
         */
        "usernameLabel": string;
        /**
          * username placeholder
         */
        "usernamePlaceholder": string;
        /**
          * username type
         */
        "usernameType": 'email' | 'text' | 'number';
    }
    interface CdsSignInSeparator {
        /**
          * CSS classes
         */
        "class": string;
    }
    interface CdsSkeleton {
        /**
          * Display as a circle
         */
        "circle": boolean;
        /**
          * Base color
         */
        "color": string;
        /**
          * The number of times the skeleton element should be repeated
         */
        "count": number;
        /**
          * Animation duration
         */
        "duration": number;
        /**
          * Height
         */
        "height": string;
        /**
          * Highlight color
         */
        "highlightColor": string;
        /**
          * Display squared
         */
        "squared": boolean;
        /**
          * Width
         */
        "width": string;
    }
    interface CdsStats {
        /**
          * Align
         */
        "align": 'left' | 'right' | 'center';
        /**
          * CSS classes
         */
        "class": string;
        /**
          * Is No Border
         */
        "noBorder": boolean;
        /**
          * Simple Layout
         */
        "simple": boolean;
    }
    interface CdsStatsItem {
        /**
          * Align
         */
        "align": 'left' | 'right' | 'center';
        /**
          * CSS classes
         */
        "class": string;
        /**
          * Metric
         */
        "metric": string;
        /**
          * Metric Color
         */
        "metricColor": textColorProp;
        /**
          * Metric Sizes
         */
        "metricSize": typographySizeProp;
        /**
          * Align
         */
        "reversed": boolean;
        /**
          * Value Color
         */
        "valueColor": textColorProp;
        /**
          * Value Sizes
         */
        "valueSize": typographySizeProp;
    }
    interface CdsSwitch {
        /**
          * Switch is checked
         */
        "checked": boolean;
        /**
          * Switch is disabled
         */
        "disabled": boolean;
        /**
          * Name
         */
        "name": string;
        /**
          * Is outlined
         */
        "outlined": boolean;
        /**
          * Size
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Unique id of the switch
         */
        "switchId": string;
    }
    interface CdsTable {
        /**
          * Bordered
         */
        "bordered": boolean;
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Fullwidth
         */
        "fullwidth": boolean;
        /**
          * Hoverable
         */
        "hoverable": boolean;
        /**
          * Narrow
         */
        "narrow": boolean;
        /**
          * Scrollable
         */
        "scrollable": boolean;
        /**
          * Striped
         */
        "striped": boolean;
    }
    interface CdsTabs {
        /**
          * Alignment
         */
        "align": 'centered' | 'right';
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Full width
         */
        "fullwidth": boolean;
        /**
          * Rounded
         */
        "rounded": boolean;
        /**
          * Pagination size
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Style
         */
        "tabStyle": 'boxed' | 'toggle';
    }
    interface CdsTag {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Color
         */
        "color": colorProp;
        /**
          * Is delete
         */
        "delete": boolean;
        /**
          * Link href
         */
        "href": string;
        /**
          * Is light color variant
         */
        "light": boolean;
        /**
          * Is rounded
         */
        "rounded": boolean;
        /**
          * Size
         */
        "size": 'normal' | 'medium' | 'large';
        /**
          * Tag
         */
        "tag": 'span' | 'div' | 'a' | 'button';
    }
    interface CdsTags {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Has addons
         */
        "hasAddons": boolean;
        /**
          * Size
         */
        "size": 'medium' | 'large';
    }
    interface CdsTextarea {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Control class
         */
        "controlClass": string;
        /**
          * Disabled state
         */
        "disabled": boolean;
        /**
          * Fixed size
         */
        "hasFixedSize": boolean;
        /**
          * Label
         */
        "label": string;
        /**
          * Loading state
         */
        "loading": boolean;
        /**
          * Message
         */
        "message": string;
        /**
          * Placeholder
         */
        "placeholder": string;
        /**
          * Readonly state
         */
        "readonly": boolean;
        /**
          * Rows
         */
        "rows": number;
        /**
          * Size
         */
        "size": 'small' | 'normal' | 'medium' | 'large';
        /**
          * State
         */
        "state": 'hovered' | 'focused';
        /**
          * Unique id (used in textarea and label)
         */
        "textareaId": string;
        /**
          * Name
         */
        "textareaName": string;
        /**
          * Text area status
         */
        "textareaStatus": 'success' | 'danger';
        /**
          * Value
         */
        "value": string | number;
    }
    interface CdsToast {
        /**
          * Toast in animation
         */
        "animateIn": string;
        /**
          * Toast out animation
         */
        "animateOut": string;
        /**
          * Duration before toast is removed
         */
        "duration": number;
        /**
          * Pause toast removal while hovered?
         */
        "pauseOnHover": boolean;
        /**
          * Position of toast notifications
         */
        "position": positionLocationsProp;
    }
    interface CdsTooltip {
        /**
          * CSS Classes
         */
        "class": string;
        /**
          * Tooltip color
         */
        "color": colorProp;
        /**
          * Tooltip offset
         */
        "offset": number;
        /**
          * Tooltip placement
         */
        "placement": tooltipPlacementProp;
        /**
          * Tooltip trigger
         */
        "trigger": tooltipTriggerProp;
    }
    interface CdsVideo {
        /**
          * Show video controls (not applicable to embedded video)
         */
        "controls": boolean;
        /**
          * Is embedded
         */
        "embedded": boolean;
        /**
          * Pause video only apply to direct video
         */
        "pauseVideo": () => Promise<void>;
        /**
          * Play video only apply to direct video
         */
        "playVideo": () => Promise<void>;
        /**
          * Video ratio
         */
        "ratio": imageRatioProps;
        /**
          * Video url
         */
        "videoUrl": string;
    }
}
declare global {
    interface HTMLCdsAccordionElement extends Components.CdsAccordion, HTMLStencilElement {
    }
    var HTMLCdsAccordionElement: {
        prototype: HTMLCdsAccordionElement;
        new (): HTMLCdsAccordionElement;
    };
    interface HTMLCdsAccordionItemElement extends Components.CdsAccordionItem, HTMLStencilElement {
    }
    var HTMLCdsAccordionItemElement: {
        prototype: HTMLCdsAccordionItemElement;
        new (): HTMLCdsAccordionItemElement;
    };
    interface HTMLCdsAvatarElement extends Components.CdsAvatar, HTMLStencilElement {
    }
    var HTMLCdsAvatarElement: {
        prototype: HTMLCdsAvatarElement;
        new (): HTMLCdsAvatarElement;
    };
    interface HTMLCdsBackToTopElement extends Components.CdsBackToTop, HTMLStencilElement {
    }
    var HTMLCdsBackToTopElement: {
        prototype: HTMLCdsBackToTopElement;
        new (): HTMLCdsBackToTopElement;
    };
    interface HTMLCdsBannerElement extends Components.CdsBanner, HTMLStencilElement {
    }
    var HTMLCdsBannerElement: {
        prototype: HTMLCdsBannerElement;
        new (): HTMLCdsBannerElement;
    };
    interface HTMLCdsBoxElement extends Components.CdsBox, HTMLStencilElement {
    }
    var HTMLCdsBoxElement: {
        prototype: HTMLCdsBoxElement;
        new (): HTMLCdsBoxElement;
    };
    interface HTMLCdsBrandFaviconElement extends Components.CdsBrandFavicon, HTMLStencilElement {
    }
    var HTMLCdsBrandFaviconElement: {
        prototype: HTMLCdsBrandFaviconElement;
        new (): HTMLCdsBrandFaviconElement;
    };
    interface HTMLCdsBrandIconElement extends Components.CdsBrandIcon, HTMLStencilElement {
    }
    var HTMLCdsBrandIconElement: {
        prototype: HTMLCdsBrandIconElement;
        new (): HTMLCdsBrandIconElement;
    };
    interface HTMLCdsBrandLogoElement extends Components.CdsBrandLogo, HTMLStencilElement {
    }
    var HTMLCdsBrandLogoElement: {
        prototype: HTMLCdsBrandLogoElement;
        new (): HTMLCdsBrandLogoElement;
    };
    interface HTMLCdsBreadcrumbElement extends Components.CdsBreadcrumb, HTMLStencilElement {
    }
    var HTMLCdsBreadcrumbElement: {
        prototype: HTMLCdsBreadcrumbElement;
        new (): HTMLCdsBreadcrumbElement;
    };
    interface HTMLCdsButtonElement extends Components.CdsButton, HTMLStencilElement {
    }
    var HTMLCdsButtonElement: {
        prototype: HTMLCdsButtonElement;
        new (): HTMLCdsButtonElement;
    };
    interface HTMLCdsButtonsElement extends Components.CdsButtons, HTMLStencilElement {
    }
    var HTMLCdsButtonsElement: {
        prototype: HTMLCdsButtonsElement;
        new (): HTMLCdsButtonsElement;
    };
    interface HTMLCdsCalendarElement extends Components.CdsCalendar, HTMLStencilElement {
    }
    var HTMLCdsCalendarElement: {
        prototype: HTMLCdsCalendarElement;
        new (): HTMLCdsCalendarElement;
    };
    interface HTMLCdsCalendarContainerElement extends Components.CdsCalendarContainer, HTMLStencilElement {
    }
    var HTMLCdsCalendarContainerElement: {
        prototype: HTMLCdsCalendarContainerElement;
        new (): HTMLCdsCalendarContainerElement;
    };
    interface HTMLCdsCalendarContentElement extends Components.CdsCalendarContent, HTMLStencilElement {
    }
    var HTMLCdsCalendarContentElement: {
        prototype: HTMLCdsCalendarContentElement;
        new (): HTMLCdsCalendarContentElement;
    };
    interface HTMLCdsCalendarInputElement extends Components.CdsCalendarInput, HTMLStencilElement {
    }
    var HTMLCdsCalendarInputElement: {
        prototype: HTMLCdsCalendarInputElement;
        new (): HTMLCdsCalendarInputElement;
    };
    interface HTMLCdsCardElement extends Components.CdsCard, HTMLStencilElement {
    }
    var HTMLCdsCardElement: {
        prototype: HTMLCdsCardElement;
        new (): HTMLCdsCardElement;
    };
    interface HTMLCdsCardContentElement extends Components.CdsCardContent, HTMLStencilElement {
    }
    var HTMLCdsCardContentElement: {
        prototype: HTMLCdsCardContentElement;
        new (): HTMLCdsCardContentElement;
    };
    interface HTMLCdsCardFooterElement extends Components.CdsCardFooter, HTMLStencilElement {
    }
    var HTMLCdsCardFooterElement: {
        prototype: HTMLCdsCardFooterElement;
        new (): HTMLCdsCardFooterElement;
    };
    interface HTMLCdsCardGridElement extends Components.CdsCardGrid, HTMLStencilElement {
    }
    var HTMLCdsCardGridElement: {
        prototype: HTMLCdsCardGridElement;
        new (): HTMLCdsCardGridElement;
    };
    interface HTMLCdsCardHeaderElement extends Components.CdsCardHeader, HTMLStencilElement {
    }
    var HTMLCdsCardHeaderElement: {
        prototype: HTMLCdsCardHeaderElement;
        new (): HTMLCdsCardHeaderElement;
    };
    interface HTMLCdsCardImageElement extends Components.CdsCardImage, HTMLStencilElement {
    }
    var HTMLCdsCardImageElement: {
        prototype: HTMLCdsCardImageElement;
        new (): HTMLCdsCardImageElement;
    };
    interface HTMLCdsCarouselElement extends Components.CdsCarousel, HTMLStencilElement {
    }
    var HTMLCdsCarouselElement: {
        prototype: HTMLCdsCarouselElement;
        new (): HTMLCdsCarouselElement;
    };
    interface HTMLCdsCheckboxElement extends Components.CdsCheckbox, HTMLStencilElement {
    }
    var HTMLCdsCheckboxElement: {
        prototype: HTMLCdsCheckboxElement;
        new (): HTMLCdsCheckboxElement;
    };
    interface HTMLCdsColumnElement extends Components.CdsColumn, HTMLStencilElement {
    }
    var HTMLCdsColumnElement: {
        prototype: HTMLCdsColumnElement;
        new (): HTMLCdsColumnElement;
    };
    interface HTMLCdsColumnsElement extends Components.CdsColumns, HTMLStencilElement {
    }
    var HTMLCdsColumnsElement: {
        prototype: HTMLCdsColumnsElement;
        new (): HTMLCdsColumnsElement;
    };
    interface HTMLCdsContainerElement extends Components.CdsContainer, HTMLStencilElement {
    }
    var HTMLCdsContainerElement: {
        prototype: HTMLCdsContainerElement;
        new (): HTMLCdsContainerElement;
    };
    interface HTMLCdsContentElement extends Components.CdsContent, HTMLStencilElement {
    }
    var HTMLCdsContentElement: {
        prototype: HTMLCdsContentElement;
        new (): HTMLCdsContentElement;
    };
    interface HTMLCdsCookieConsentElement extends Components.CdsCookieConsent, HTMLStencilElement {
    }
    var HTMLCdsCookieConsentElement: {
        prototype: HTMLCdsCookieConsentElement;
        new (): HTMLCdsCookieConsentElement;
    };
    interface HTMLCdsDividerElement extends Components.CdsDivider, HTMLStencilElement {
    }
    var HTMLCdsDividerElement: {
        prototype: HTMLCdsDividerElement;
        new (): HTMLCdsDividerElement;
    };
    interface HTMLCdsDropdownElement extends Components.CdsDropdown, HTMLStencilElement {
    }
    var HTMLCdsDropdownElement: {
        prototype: HTMLCdsDropdownElement;
        new (): HTMLCdsDropdownElement;
    };
    interface HTMLCdsFeatureElement extends Components.CdsFeature, HTMLStencilElement {
    }
    var HTMLCdsFeatureElement: {
        prototype: HTMLCdsFeatureElement;
        new (): HTMLCdsFeatureElement;
    };
    interface HTMLCdsFeatureHeaderElement extends Components.CdsFeatureHeader, HTMLStencilElement {
    }
    var HTMLCdsFeatureHeaderElement: {
        prototype: HTMLCdsFeatureHeaderElement;
        new (): HTMLCdsFeatureHeaderElement;
    };
    interface HTMLCdsFeatureItemElement extends Components.CdsFeatureItem, HTMLStencilElement {
    }
    var HTMLCdsFeatureItemElement: {
        prototype: HTMLCdsFeatureItemElement;
        new (): HTMLCdsFeatureItemElement;
    };
    interface HTMLCdsFieldElement extends Components.CdsField, HTMLStencilElement {
    }
    var HTMLCdsFieldElement: {
        prototype: HTMLCdsFieldElement;
        new (): HTMLCdsFieldElement;
    };
    interface HTMLCdsFileElement extends Components.CdsFile, HTMLStencilElement {
    }
    var HTMLCdsFileElement: {
        prototype: HTMLCdsFileElement;
        new (): HTMLCdsFileElement;
    };
    interface HTMLCdsFileInputElement extends Components.CdsFileInput, HTMLStencilElement {
    }
    var HTMLCdsFileInputElement: {
        prototype: HTMLCdsFileInputElement;
        new (): HTMLCdsFileInputElement;
    };
    interface HTMLCdsFooterElement extends Components.CdsFooter, HTMLStencilElement {
    }
    var HTMLCdsFooterElement: {
        prototype: HTMLCdsFooterElement;
        new (): HTMLCdsFooterElement;
    };
    interface HTMLCdsGridElement extends Components.CdsGrid, HTMLStencilElement {
    }
    var HTMLCdsGridElement: {
        prototype: HTMLCdsGridElement;
        new (): HTMLCdsGridElement;
    };
    interface HTMLCdsGridItemElement extends Components.CdsGridItem, HTMLStencilElement {
    }
    var HTMLCdsGridItemElement: {
        prototype: HTMLCdsGridItemElement;
        new (): HTMLCdsGridItemElement;
    };
    interface HTMLCdsHeadingElement extends Components.CdsHeading, HTMLStencilElement {
    }
    var HTMLCdsHeadingElement: {
        prototype: HTMLCdsHeadingElement;
        new (): HTMLCdsHeadingElement;
    };
    interface HTMLCdsHeroElement extends Components.CdsHero, HTMLStencilElement {
    }
    var HTMLCdsHeroElement: {
        prototype: HTMLCdsHeroElement;
        new (): HTMLCdsHeroElement;
    };
    interface HTMLCdsIconElement extends Components.CdsIcon, HTMLStencilElement {
    }
    var HTMLCdsIconElement: {
        prototype: HTMLCdsIconElement;
        new (): HTMLCdsIconElement;
    };
    interface HTMLCdsImageElement extends Components.CdsImage, HTMLStencilElement {
    }
    var HTMLCdsImageElement: {
        prototype: HTMLCdsImageElement;
        new (): HTMLCdsImageElement;
    };
    interface HTMLCdsInputElement extends Components.CdsInput, HTMLStencilElement {
    }
    var HTMLCdsInputElement: {
        prototype: HTMLCdsInputElement;
        new (): HTMLCdsInputElement;
    };
    interface HTMLCdsListBlockElement extends Components.CdsListBlock, HTMLStencilElement {
    }
    var HTMLCdsListBlockElement: {
        prototype: HTMLCdsListBlockElement;
        new (): HTMLCdsListBlockElement;
    };
    interface HTMLCdsListBlockItemElement extends Components.CdsListBlockItem, HTMLStencilElement {
    }
    var HTMLCdsListBlockItemElement: {
        prototype: HTMLCdsListBlockItemElement;
        new (): HTMLCdsListBlockItemElement;
    };
    interface HTMLCdsLoadingIndicatorElement extends Components.CdsLoadingIndicator, HTMLStencilElement {
    }
    var HTMLCdsLoadingIndicatorElement: {
        prototype: HTMLCdsLoadingIndicatorElement;
        new (): HTMLCdsLoadingIndicatorElement;
    };
    interface HTMLCdsLogoElement extends Components.CdsLogo, HTMLStencilElement {
    }
    var HTMLCdsLogoElement: {
        prototype: HTMLCdsLogoElement;
        new (): HTMLCdsLogoElement;
    };
    interface HTMLCdsLottieAnimationElement extends Components.CdsLottieAnimation, HTMLStencilElement {
    }
    var HTMLCdsLottieAnimationElement: {
        prototype: HTMLCdsLottieAnimationElement;
        new (): HTMLCdsLottieAnimationElement;
    };
    interface HTMLCdsMenuElement extends Components.CdsMenu, HTMLStencilElement {
    }
    var HTMLCdsMenuElement: {
        prototype: HTMLCdsMenuElement;
        new (): HTMLCdsMenuElement;
    };
    interface HTMLCdsMessageElement extends Components.CdsMessage, HTMLStencilElement {
    }
    var HTMLCdsMessageElement: {
        prototype: HTMLCdsMessageElement;
        new (): HTMLCdsMessageElement;
    };
    interface HTMLCdsModalElement extends Components.CdsModal, HTMLStencilElement {
    }
    var HTMLCdsModalElement: {
        prototype: HTMLCdsModalElement;
        new (): HTMLCdsModalElement;
    };
    interface HTMLCdsNavbarElement extends Components.CdsNavbar, HTMLStencilElement {
    }
    var HTMLCdsNavbarElement: {
        prototype: HTMLCdsNavbarElement;
        new (): HTMLCdsNavbarElement;
    };
    interface HTMLCdsNavbarDropdownElement extends Components.CdsNavbarDropdown, HTMLStencilElement {
    }
    var HTMLCdsNavbarDropdownElement: {
        prototype: HTMLCdsNavbarDropdownElement;
        new (): HTMLCdsNavbarDropdownElement;
    };
    interface HTMLCdsNavbarDropdownItemElement extends Components.CdsNavbarDropdownItem, HTMLStencilElement {
    }
    var HTMLCdsNavbarDropdownItemElement: {
        prototype: HTMLCdsNavbarDropdownItemElement;
        new (): HTMLCdsNavbarDropdownItemElement;
    };
    interface HTMLCdsNotificationElement extends Components.CdsNotification, HTMLStencilElement {
    }
    var HTMLCdsNotificationElement: {
        prototype: HTMLCdsNotificationElement;
        new (): HTMLCdsNotificationElement;
    };
    interface HTMLCdsPaginationElement extends Components.CdsPagination, HTMLStencilElement {
    }
    var HTMLCdsPaginationElement: {
        prototype: HTMLCdsPaginationElement;
        new (): HTMLCdsPaginationElement;
    };
    interface HTMLCdsPanelElement extends Components.CdsPanel, HTMLStencilElement {
    }
    var HTMLCdsPanelElement: {
        prototype: HTMLCdsPanelElement;
        new (): HTMLCdsPanelElement;
    };
    interface HTMLCdsProgressElement extends Components.CdsProgress, HTMLStencilElement {
    }
    var HTMLCdsProgressElement: {
        prototype: HTMLCdsProgressElement;
        new (): HTMLCdsProgressElement;
    };
    interface HTMLCdsQuoteElement extends Components.CdsQuote, HTMLStencilElement {
    }
    var HTMLCdsQuoteElement: {
        prototype: HTMLCdsQuoteElement;
        new (): HTMLCdsQuoteElement;
    };
    interface HTMLCdsRadioElement extends Components.CdsRadio, HTMLStencilElement {
    }
    var HTMLCdsRadioElement: {
        prototype: HTMLCdsRadioElement;
        new (): HTMLCdsRadioElement;
    };
    interface HTMLCdsRangeElement extends Components.CdsRange, HTMLStencilElement {
    }
    var HTMLCdsRangeElement: {
        prototype: HTMLCdsRangeElement;
        new (): HTMLCdsRangeElement;
    };
    interface HTMLCdsSectionElement extends Components.CdsSection, HTMLStencilElement {
    }
    var HTMLCdsSectionElement: {
        prototype: HTMLCdsSectionElement;
        new (): HTMLCdsSectionElement;
    };
    interface HTMLCdsSelectElement extends Components.CdsSelect, HTMLStencilElement {
    }
    var HTMLCdsSelectElement: {
        prototype: HTMLCdsSelectElement;
        new (): HTMLCdsSelectElement;
    };
    interface HTMLCdsSidebarElement extends Components.CdsSidebar, HTMLStencilElement {
    }
    var HTMLCdsSidebarElement: {
        prototype: HTMLCdsSidebarElement;
        new (): HTMLCdsSidebarElement;
    };
    interface HTMLCdsSignInElement extends Components.CdsSignIn, HTMLStencilElement {
    }
    var HTMLCdsSignInElement: {
        prototype: HTMLCdsSignInElement;
        new (): HTMLCdsSignInElement;
    };
    interface HTMLCdsSignInSeparatorElement extends Components.CdsSignInSeparator, HTMLStencilElement {
    }
    var HTMLCdsSignInSeparatorElement: {
        prototype: HTMLCdsSignInSeparatorElement;
        new (): HTMLCdsSignInSeparatorElement;
    };
    interface HTMLCdsSkeletonElement extends Components.CdsSkeleton, HTMLStencilElement {
    }
    var HTMLCdsSkeletonElement: {
        prototype: HTMLCdsSkeletonElement;
        new (): HTMLCdsSkeletonElement;
    };
    interface HTMLCdsStatsElement extends Components.CdsStats, HTMLStencilElement {
    }
    var HTMLCdsStatsElement: {
        prototype: HTMLCdsStatsElement;
        new (): HTMLCdsStatsElement;
    };
    interface HTMLCdsStatsItemElement extends Components.CdsStatsItem, HTMLStencilElement {
    }
    var HTMLCdsStatsItemElement: {
        prototype: HTMLCdsStatsItemElement;
        new (): HTMLCdsStatsItemElement;
    };
    interface HTMLCdsSwitchElement extends Components.CdsSwitch, HTMLStencilElement {
    }
    var HTMLCdsSwitchElement: {
        prototype: HTMLCdsSwitchElement;
        new (): HTMLCdsSwitchElement;
    };
    interface HTMLCdsTableElement extends Components.CdsTable, HTMLStencilElement {
    }
    var HTMLCdsTableElement: {
        prototype: HTMLCdsTableElement;
        new (): HTMLCdsTableElement;
    };
    interface HTMLCdsTabsElement extends Components.CdsTabs, HTMLStencilElement {
    }
    var HTMLCdsTabsElement: {
        prototype: HTMLCdsTabsElement;
        new (): HTMLCdsTabsElement;
    };
    interface HTMLCdsTagElement extends Components.CdsTag, HTMLStencilElement {
    }
    var HTMLCdsTagElement: {
        prototype: HTMLCdsTagElement;
        new (): HTMLCdsTagElement;
    };
    interface HTMLCdsTagsElement extends Components.CdsTags, HTMLStencilElement {
    }
    var HTMLCdsTagsElement: {
        prototype: HTMLCdsTagsElement;
        new (): HTMLCdsTagsElement;
    };
    interface HTMLCdsTextareaElement extends Components.CdsTextarea, HTMLStencilElement {
    }
    var HTMLCdsTextareaElement: {
        prototype: HTMLCdsTextareaElement;
        new (): HTMLCdsTextareaElement;
    };
    interface HTMLCdsToastElement extends Components.CdsToast, HTMLStencilElement {
    }
    var HTMLCdsToastElement: {
        prototype: HTMLCdsToastElement;
        new (): HTMLCdsToastElement;
    };
    interface HTMLCdsTooltipElement extends Components.CdsTooltip, HTMLStencilElement {
    }
    var HTMLCdsTooltipElement: {
        prototype: HTMLCdsTooltipElement;
        new (): HTMLCdsTooltipElement;
    };
    interface HTMLCdsVideoElement extends Components.CdsVideo, HTMLStencilElement {
    }
    var HTMLCdsVideoElement: {
        prototype: HTMLCdsVideoElement;
        new (): HTMLCdsVideoElement;
    };
    interface HTMLElementTagNameMap {
        "cds-accordion": HTMLCdsAccordionElement;
        "cds-accordion-item": HTMLCdsAccordionItemElement;
        "cds-avatar": HTMLCdsAvatarElement;
        "cds-back-to-top": HTMLCdsBackToTopElement;
        "cds-banner": HTMLCdsBannerElement;
        "cds-box": HTMLCdsBoxElement;
        "cds-brand-favicon": HTMLCdsBrandFaviconElement;
        "cds-brand-icon": HTMLCdsBrandIconElement;
        "cds-brand-logo": HTMLCdsBrandLogoElement;
        "cds-breadcrumb": HTMLCdsBreadcrumbElement;
        "cds-button": HTMLCdsButtonElement;
        "cds-buttons": HTMLCdsButtonsElement;
        "cds-calendar": HTMLCdsCalendarElement;
        "cds-calendar-container": HTMLCdsCalendarContainerElement;
        "cds-calendar-content": HTMLCdsCalendarContentElement;
        "cds-calendar-input": HTMLCdsCalendarInputElement;
        "cds-card": HTMLCdsCardElement;
        "cds-card-content": HTMLCdsCardContentElement;
        "cds-card-footer": HTMLCdsCardFooterElement;
        "cds-card-grid": HTMLCdsCardGridElement;
        "cds-card-header": HTMLCdsCardHeaderElement;
        "cds-card-image": HTMLCdsCardImageElement;
        "cds-carousel": HTMLCdsCarouselElement;
        "cds-checkbox": HTMLCdsCheckboxElement;
        "cds-column": HTMLCdsColumnElement;
        "cds-columns": HTMLCdsColumnsElement;
        "cds-container": HTMLCdsContainerElement;
        "cds-content": HTMLCdsContentElement;
        "cds-cookie-consent": HTMLCdsCookieConsentElement;
        "cds-divider": HTMLCdsDividerElement;
        "cds-dropdown": HTMLCdsDropdownElement;
        "cds-feature": HTMLCdsFeatureElement;
        "cds-feature-header": HTMLCdsFeatureHeaderElement;
        "cds-feature-item": HTMLCdsFeatureItemElement;
        "cds-field": HTMLCdsFieldElement;
        "cds-file": HTMLCdsFileElement;
        "cds-file-input": HTMLCdsFileInputElement;
        "cds-footer": HTMLCdsFooterElement;
        "cds-grid": HTMLCdsGridElement;
        "cds-grid-item": HTMLCdsGridItemElement;
        "cds-heading": HTMLCdsHeadingElement;
        "cds-hero": HTMLCdsHeroElement;
        "cds-icon": HTMLCdsIconElement;
        "cds-image": HTMLCdsImageElement;
        "cds-input": HTMLCdsInputElement;
        "cds-list-block": HTMLCdsListBlockElement;
        "cds-list-block-item": HTMLCdsListBlockItemElement;
        "cds-loading-indicator": HTMLCdsLoadingIndicatorElement;
        "cds-logo": HTMLCdsLogoElement;
        "cds-lottie-animation": HTMLCdsLottieAnimationElement;
        "cds-menu": HTMLCdsMenuElement;
        "cds-message": HTMLCdsMessageElement;
        "cds-modal": HTMLCdsModalElement;
        "cds-navbar": HTMLCdsNavbarElement;
        "cds-navbar-dropdown": HTMLCdsNavbarDropdownElement;
        "cds-navbar-dropdown-item": HTMLCdsNavbarDropdownItemElement;
        "cds-notification": HTMLCdsNotificationElement;
        "cds-pagination": HTMLCdsPaginationElement;
        "cds-panel": HTMLCdsPanelElement;
        "cds-progress": HTMLCdsProgressElement;
        "cds-quote": HTMLCdsQuoteElement;
        "cds-radio": HTMLCdsRadioElement;
        "cds-range": HTMLCdsRangeElement;
        "cds-section": HTMLCdsSectionElement;
        "cds-select": HTMLCdsSelectElement;
        "cds-sidebar": HTMLCdsSidebarElement;
        "cds-sign-in": HTMLCdsSignInElement;
        "cds-sign-in-separator": HTMLCdsSignInSeparatorElement;
        "cds-skeleton": HTMLCdsSkeletonElement;
        "cds-stats": HTMLCdsStatsElement;
        "cds-stats-item": HTMLCdsStatsItemElement;
        "cds-switch": HTMLCdsSwitchElement;
        "cds-table": HTMLCdsTableElement;
        "cds-tabs": HTMLCdsTabsElement;
        "cds-tag": HTMLCdsTagElement;
        "cds-tags": HTMLCdsTagsElement;
        "cds-textarea": HTMLCdsTextareaElement;
        "cds-toast": HTMLCdsToastElement;
        "cds-tooltip": HTMLCdsTooltipElement;
        "cds-video": HTMLCdsVideoElement;
    }
}
declare namespace LocalJSX {
    interface CdsAccordion {
        /**
          * Icon alignment - left or right position of toggle icon
         */
        "iconAlign"?: 'left' | 'right';
        /**
          * Enable multiple accordion items to be open at the same time
         */
        "openMultipleItems"?: boolean;
    }
    interface CdsAccordionItem {
        /**
          * Drawer title
         */
        "drawerTitle"?: string;
        /**
          * iconAlignment
         */
        "iconAlign"?: string;
        /**
          * Accordion drawer (title) clicked
         */
        "onDrawerClicked"?: (event: CustomEvent<any>) => void;
        /**
          * isOpen
         */
        "open"?: boolean;
    }
    interface CdsAvatar {
        /**
          * background color
         */
        "background"?: colorProp;
        /**
          * CSS classes
         */
        "class"?: string;
        /**
          * Avatar icon
         */
        "icon"?: iconProp;
        /**
          * Avatar image
          * @imageUploader 
          * @imageMaxWidth 300px
          * @imageMaxHeight 300px
          * @imageMinWidth 150px
          * @imageMinHeight 150px
          * @imageExt .jpg, .png
         */
        "image"?: string;
        /**
          * Avatar initials
         */
        "initials"?: string;
        /**
          * Size
         */
        "size"?: imageSizeProps;
    }
    interface CdsBackToTop {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Color
         */
        "color"?: colorProp;
        /**
          * Float Position
         */
        "floatPosition"?: backToTopFloatProps;
        /**
          * Icon
         */
        "icon"?: iconProp;
        /**
          * Light
         */
        "light"?: boolean;
    }
    interface CdsBanner {
        /**
          * Action Color
         */
        "actionColor"?: buttonColorProp;
        /**
          * Action Link
         */
        "actionLink"?: string;
        /**
          * Action Text
         */
        "actionText"?: string;
        /**
          * CSS Class
         */
        "class"?: string;
        /**
          * color
         */
        "color"?: colorProp;
        /**
          * Is Light
         */
        "light"?: boolean;
        /**
          * On Action Clicked
         */
        "onActionClicked"?: (event: CustomEvent<any>) => void;
        /**
          * Position
         */
        "position"?: 'float-top' | 'float-bottom' | 'fixed-top' | 'fixed-bottom';
        /**
          * Show
         */
        "show"?: boolean;
    }
    interface CdsBox {
        /**
          * CSS classes
         */
        "class"?: string;
    }
    interface CdsBrandFavicon {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Height (px)
         */
        "height"?: number;
        /**
          * Size
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Variant
         */
        "variant"?: typeof generatedBrands.favicon[number];
        /**
          * Width (px)
         */
        "width"?: number;
    }
    interface CdsBrandIcon {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Height (px)
         */
        "height"?: number;
        /**
          * Size
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Variant
         */
        "variant"?: typeof generatedBrands.icons[number];
        /**
          * Width (px)
         */
        "width"?: number;
    }
    interface CdsBrandLogo {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Height (px)
         */
        "height"?: number;
        /**
          * Size
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Variant
         */
        "variant"?: typeof generatedBrands.logos[number];
        /**
          * Width (px)
         */
        "width"?: number;
    }
    interface CdsBreadcrumb {
        /**
          * Breadcrumb alignment
         */
        "align"?: 'centered' | 'right';
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Separator
         */
        "separator"?: | 'has-arrow-separator'
    | 'has-bullet-separator'
    | 'has-dot-separator'
    | 'has-succeeds-separator';
        /**
          * Size
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface CdsButton {
        /**
          * Active state
         */
        "active"?: boolean;
        /**
          * CSS classes
         */
        "class"?: string;
        /**
          * Color
         */
        "color"?: buttonColorProp;
        /**
          * Is disabled?
         */
        "disabled"?: boolean;
        /**
          * Focused state
         */
        "focused"?: boolean;
        /**
          * Display the button in full-width
         */
        "fullwidth"?: boolean;
        /**
          * Hovered state
         */
        "hovered"?: boolean;
        /**
          * Link href
         */
        "href"?: string;
        /**
          * Is inverted
         */
        "inverted"?: boolean;
        /**
          * Is light color variant
         */
        "light"?: boolean;
        /**
          * Loading state
         */
        "loading"?: boolean;
        /**
          * on button clicked event
         */
        "onClicked"?: (event: CustomEvent<any>) => void;
        /**
          * Is outlined
         */
        "outlined"?: boolean;
        /**
          * Rounded button
         */
        "rounded"?: boolean;
        /**
          * Size
         */
        "size"?: 'small' | 'medium' | 'large' | 'normal';
        /**
          * Element tag to render
         */
        "tag"?: 'a' | 'button' | 'input';
        /**
          * Button or input type
         */
        "type"?: 'submit' | 'reset' | 'button';
    }
    interface CdsButtons {
        /**
          * Attached button alignment
         */
        "align"?: 'center' | 'right';
        /**
          * CSS classes
         */
        "class"?: string;
        /**
          * Attach buttons together
         */
        "hasAddons"?: boolean;
        /**
          * Buttons size
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface CdsCalendar {
        /**
          * Format
         */
        "format"?: string;
        /**
          * On date selected
         */
        "onSelected"?: (event: CustomEvent<any>) => void;
        /**
          * Show Calendar
         */
        "show"?: boolean;
        /**
          * value
         */
        "value"?: string;
    }
    interface CdsCalendarContainer {
        /**
          * Selected Date
         */
        "currentDate"?: Date;
        /**
          * On date selected
         */
        "onSelected"?: (event: CustomEvent<any>) => void;
    }
    interface CdsCalendarContent {
        /**
          * Current Date
         */
        "currentDate"?: Date;
        /**
          * Display Date (Current Display Month)
         */
        "displayDate"?: Date;
        /**
          * on go to today click
         */
        "onGotoTodayClicked"?: (event: CustomEvent<any>) => void;
        /**
          * On date selected
         */
        "onSelected"?: (event: CustomEvent<any>) => void;
        /**
          * On view updated
         */
        "onViewUpdated"?: (event: CustomEvent<any>) => void;
        /**
          * Position
         */
        "position"?: 'current' | 'prevContent' | 'nextContent';
        /**
          * view
         */
        "view"?: 'days' | 'months' | 'years';
    }
    interface CdsCalendarInput {
        /**
          * Disabled state
         */
        "disabled"?: boolean;
        /**
          * Format
         */
        "format"?: string;
        /**
          * inputAttributes - adds custom attributes to the input field declared attributes will be overridden
         */
        "inputAttributes"?: any;
        /**
          * Unique id (used in input and label)
         */
        "inputId"?: string;
        /**
          * Input status
         */
        "inputStatus"?: 'success' | 'danger';
        /**
          * Label for input
         */
        "label"?: string;
        /**
          * Loading state
         */
        "loading"?: boolean;
        /**
          * Message
         */
        "message"?: string;
        /**
          * Name
         */
        "name"?: string;
        /**
          * On date selected
         */
        "onSelected"?: (event: CustomEvent<any>) => void;
        /**
          * Placeholder
         */
        "placeholder"?: string;
        /**
          * The input will look similar to a normal one, but is not editable and has no shadow
         */
        "readonly"?: boolean;
        /**
          * Required
         */
        "required"?: boolean;
        /**
          * Rounded
         */
        "rounded"?: boolean;
        /**
          * Show Calendar
         */
        "show"?: boolean;
        /**
          * Size
         */
        "size"?: 'small' | 'normal' | 'medium' | 'large';
        /**
          * State
         */
        "state"?: 'hovered' | 'focused';
        /**
          * Removes the background, border, shadow, and horizontal padding
         */
        "static"?: boolean;
        /**
          * value
         */
        "value"?: string;
    }
    interface CdsCard {
        /**
          * CSS Classes
         */
        "class"?: string;
    }
    interface CdsCardContent {
        /**
          * CSS Classes
         */
        "class"?: string;
    }
    interface CdsCardFooter {
        /**
          * CSS Classes
         */
        "class"?: string;
    }
    interface CdsCardGrid {
        /**
          * Card description
         */
        "cardDescription"?: string;
        /**
          * Card title
         */
        "cardTitle"?: string;
        /**
          * Card icon
         */
        "icon"?: string;
        /**
          * Card img
         */
        "img"?: string;
        /**
          * Card link
         */
        "link"?: string;
        /**
          * Triggers when card is selected.
         */
        "onCardGridSelected"?: (event: CustomEvent<any>) => void;
    }
    interface CdsCardHeader {
        /**
          * CSS Classes
         */
        "class"?: string;
    }
    interface CdsCardImage {
        /**
          * CSS Classes
         */
        "class"?: string;
    }
    interface CdsCarousel {
        /**
          * 'default'
         */
        "carouselType"?: 'default' | 'on-boarding' | 'slider' | 'fixed-width';
        /**
          * Fixes width of slide to pixels Used to customise the width of the  'offer-card' type carousel
         */
        "fixedWidthPixels"?: number;
        /**
          * Gradient colour (as rgb values eg '255, 255, 255')
         */
        "gradientColourRgb"?: string;
        /**
          * Heading that sits on top of carousel
         */
        "heading"?: string;
        /**
          * Hide pagination on mobiles
         */
        "hidePaginationMobile"?: boolean;
        /**
          * Hide prev/next buttons for mobile devies
         */
        "hidePrevNextForMobile"?: true;
        /**
          * Triggered at the end of gallery
         */
        "onAfterSlideScroll"?: (event: CustomEvent<any>) => void;
        /**
          * Triggers when dismiss is clicked
         */
        "onDismissSlider"?: (event: CustomEvent<any>) => void;
        /**
          * Triggers when cta on slide is clicked.
         */
        "onSlideCtaClick"?: (event: CustomEvent<any>) => void;
        /**
          * Padding bottom on carousel scroller
         */
        "scrollerPaddingBottom"?: string;
        /**
          * Show dismiss link
         */
        "showDismiss"?: boolean;
        /**
          * Show pagination
         */
        "showPagination"?: boolean;
        /**
          * Show prev and next buttons
         */
        "showPrevNext"?: boolean;
        /**
          * Show gradient under previous / next buttons
         */
        "showPrevNextGradient"?: false;
        /**
          * Slides (only applicable for on-boarding and slider carousel types)
         */
        "slides"?: string;
    }
    interface CdsCheckbox {
        /**
          * Id
         */
        "checkboxId"?: any;
        /**
          * Name
         */
        "checkboxName"?: any;
        /**
          * Checked
         */
        "checked"?: boolean;
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Disabled
         */
        "disabled"?: boolean;
        /**
          * Label classes
         */
        "labelClass"?: string;
        /**
          * cdsInputChange event, contains change from input
         */
        "onCdsInputChange"?: (event: CustomEvent<any>) => void;
        /**
          * cdsInputFocusIn event - focusin event from input
         */
        "onCdsInputFocusIn"?: (event: CustomEvent<any>) => void;
        /**
          * cdsInputFocusOut event - focusout event in Input
         */
        "onCdsInputFocusOut"?: (event: CustomEvent<any>) => void;
    }
    interface CdsColumn {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Narrow column
         */
        "narrow"?: boolean;
        /**
          * Sizes
         */
        "size"?: columnSizes;
    }
    interface CdsColumns {
        /**
          * Centered
         */
        "centered"?: boolean;
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Desktop
         */
        "desktop"?: boolean;
        /**
          * Gapless
         */
        "gapless"?: boolean;
        /**
          * Columns gaps
         */
        "gaps"?: columnGapProps;
        /**
          * Mobile
         */
        "mobile"?: boolean;
        /**
          * Multiline
         */
        "multiline"?: boolean;
        /**
          * Vertically centered
         */
        "vcentered"?: boolean;
    }
    interface CdsContainer {
        /**
          * Container breakpoint
         */
        "breakpoint"?: 'desktop' | 'widescreen' | 'fullhd';
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Fluid container
         */
        "fluid"?: boolean;
    }
    interface CdsContent {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Content size
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface CdsCookieConsent {
        /**
          * accessible label
         */
        "accessibleLabel"?: string;
        /**
          * background
         */
        "background"?: colorProp;
        /**
          * button color
         */
        "buttonColor"?: colorProp;
        /**
          * button text
         */
        "buttonText"?: string;
        /**
          * CSS classes
         */
        "class"?: string;
        /**
          * confirm event
         */
        "onConfirmed"?: (event: CustomEvent<any>) => void;
        /**
          * position
         */
        "position"?: 'top' | 'bottom' | 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
        /**
          * show
         */
        "show"?: boolean;
    }
    interface CdsDivider {
        /**
          * CSS classes
         */
        "class"?: string;
    }
    interface CdsDropdown {
        /**
          * The dropdown visibility
         */
        "active"?: boolean;
        /**
          * Align the dropdown to the center
         */
        "center"?: boolean;
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Fullwidth
         */
        "fullwidth"?: boolean;
        /**
          * The dropdown will show up when hovering the dropdown-trigger
         */
        "hoverable"?: boolean;
        /**
          * show/hide state updated
         */
        "onUpdated"?: (event: CustomEvent<any>) => void;
        /**
          * Align the dropdown to the right
         */
        "right"?: boolean;
        /**
          * Dropdown menu that appears above the dropdown button
         */
        "up"?: boolean;
    }
    interface CdsFeature {
        /**
          * CSS classes
         */
        "class"?: string;
        /**
          * layout
         */
        "layout"?: 'left' | 'right' | 'stack';
    }
    interface CdsFeatureHeader {
        /**
          * align
         */
        "align"?: 'left' | 'right' | 'center';
        /**
          * CSS classes
         */
        "class"?: string;
        /**
          * size
         */
        "size"?: 'small' | 'normal' | 'medium' | 'large';
    }
    interface CdsFeatureItem {
        /**
          * CSS classes
         */
        "class"?: string;
        /**
          * description
         */
        "description"?: string;
        /**
          * heading
         */
        "heading"?: string;
        /**
          * icon
         */
        "icon"?: iconProp;
        /**
          * icon color
         */
        "iconColor"?: colorProp;
        /**
          * icon inverted
         */
        "iconInverted"?: boolean;
        /**
          * icon light
         */
        "iconLight"?: boolean;
        /**
          * icon outlined
         */
        "iconOutlined"?: boolean;
        /**
          * icon size
         */
        "iconSize"?: 'small' | 'medium' | 'large';
        /**
          * is icon background
         */
        "iconWithBackground"?: boolean;
        /**
          * layout
         */
        "layout"?: 'stack' | 'stack-center' | 'horizontal';
    }
    interface CdsField {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Grouped field
         */
        "grouped"?: boolean;
        /**
          * Grouped, on multiline
         */
        "groupedMultiline"?: boolean;
        /**
          * Has addons
         */
        "hasAddons"?: boolean;
        /**
          * Horizontal field
         */
        "horizontal"?: boolean;
        /**
          * Label
         */
        "label"?: string;
        /**
          * Help or error message
         */
        "message"?: string;
        /**
          * Field size
         */
        "size"?: 'small' | 'normal' | 'medium' | 'large';
    }
    interface CdsFile {
        /**
          * Alignment
         */
        "align"?: 'left' | 'centered' | 'right';
        /**
          * Boxed block
         */
        "boxed"?: boolean;
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Color
         */
        "color"?: colorProp;
        /**
          * File
         */
        "file"?: File;
        /**
          * Expand the name to fill up the space
         */
        "fullwidth"?: boolean;
        /**
          * Add a placeholder for the selected file name
         */
        "hasName"?: boolean;
        /**
          * Name
         */
        "name"?: string;
        /**
          * Placeholder
         */
        "placeholder"?: string;
        /**
          * Move the CTA to the right side
         */
        "right"?: boolean;
        /**
          * Size
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface CdsFileInput {
        /**
          * File types allowed
         */
        "accept"?: string;
        /**
          * Add class to the 'Add' button
         */
        "addButtonClass"?: string;
        /**
          * Add button label
         */
        "addButtonLabel"?: string;
        /**
          * Enable drag drop file input
         */
        "dragDrop"?: boolean;
        /**
          * Drag drop instruction
         */
        "dragDropText"?: string;
        /**
          * Icon name
         */
        "icon"?: iconProp;
        /**
          * id of input field
         */
        "inputId"?: string;
        /**
          * Label description
         */
        "labelDescription"?: string;
        /**
          * Label title
         */
        "labelTitle"?: string;
        /**
          * Allow multiple files
         */
        "multiple"?: boolean;
        /**
          * File(s) that were added. Emits event with FileList
         */
        "onFilesAdded"?: (event: CustomEvent<any>) => void;
    }
    interface CdsFooter {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Color
         */
        "color"?: 'dark' | 'white';
        /**
          * Disclaimer
         */
        "disclaimer"?: string;
        /**
          * Social Links Position
         */
        "disclaimerPosition"?: footerDisclaimerPositionProps;
        /**
          * layout
         */
        "layout"?: footerLayoutProps;
        /**
          * Links
         */
        "links"?: string;
        /**
          * Social Links below footer content box
         */
        "socialBelowContent"?: boolean;
        /**
          * Social Links
         */
        "socialLinks"?: string;
    }
    interface CdsGrid {
        /**
          * align
         */
        "align"?: 'left' | 'right' | 'center';
        /**
          * CSS classes
         */
        "class"?: string;
        /**
          * Number of Columns
         */
        "columns"?: '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12';
        /**
          * Gap
         */
        "gap"?: '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8';
        /**
          * Vertical Gap
         */
        "verticalGap"?: '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8';
    }
    interface CdsGridItem {
        /**
          * CSS classes
         */
        "class"?: string;
    }
    interface CdsHeading {
        /**
          * Alignment
         */
        "align"?: textAlignmentProp;
        /**
          * CSS classes
         */
        "class"?: string;
        /**
          * Color
         */
        "color"?: textColorProp;
        /**
          * Font Family
         */
        "fontFamily"?: textFontFamilieProp;
        /**
          * No Margin
         */
        "noMargin"?: boolean;
        /**
          * Size
         */
        "size"?: headingSizeProp;
        /**
          * Is Subtitle
         */
        "subtitle"?: boolean;
        /**
          * Transform
         */
        "transform"?: textTransformationProp;
        /**
          * Font Weight
         */
        "weight"?: textWeightProp;
    }
    interface CdsHero {
        /**
          * Copy
         */
        "copy"?: string;
        /**
          * Copy Color
         */
        "copyColor"?: textColorProp;
        /**
          * Heading
         */
        "heading"?: string;
        /**
          * Heading Color
         */
        "headingColor"?: textColorProp;
        /**
          * Background image url
          * @imageUploader 
          * @imageMinWidth 1500px
          * @imageMinHeight 1000px
          * @imageExt .jpg, .png
         */
        "image"?: string;
        /**
          * Triggers when primary action clicked
         */
        "onPrimaryClicked"?: (event: CustomEvent<any>) => void;
        /**
          * Triggers when secondary action clicked
         */
        "onSecondaryClicked"?: (event: CustomEvent<any>) => void;
        /**
          * Background overlay
         */
        "overlay"?: heroOverlayProps;
        /**
          * Primary Action
         */
        "primaryAction"?: string;
        /**
          * Secondary Action
         */
        "secondaryAction"?: string;
        /**
          * Size
         */
        "size"?: heroSizeProps;
        /**
          * Video url
         */
        "video"?: string;
        /**
          * Video embedded
         */
        "videoEmbedded"?: boolean;
    }
    interface CdsIcon {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Color
         */
        "color"?: colorProp;
        /**
          * Icon name (svg file name)
         */
        "icon"?: iconProp;
        /**
          * Size
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface CdsImage {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Ratio
         */
        "ratio"?: imageRatioProps;
        /**
          * Size
         */
        "size"?: imageSizeProps;
    }
    interface CdsInput {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Control Classes eg. has-icons
         */
        "controlClass"?: string;
        /**
          * Disabled state
         */
        "disabled"?: boolean;
        /**
          * inputAttributes - adds custom attributes to the input field declared attributes will be overridden
         */
        "inputAttributes"?: any;
        /**
          * Unique id (used in input and label)
         */
        "inputId"?: string;
        /**
          * Input status
         */
        "inputStatus"?: 'success' | 'danger';
        /**
          * Label for input
         */
        "label"?: string;
        /**
          * Loading state
         */
        "loading"?: boolean;
        /**
          * Message
         */
        "message"?: string;
        /**
          * Name
         */
        "name"?: string;
        /**
          * cdsInput event - InputEvent from input
         */
        "onCdsInput"?: (event: CustomEvent<any>) => void;
        /**
          * cdsInputChange event - ChangeEvent from input
         */
        "onCdsInputChange"?: (event: CustomEvent<any>) => void;
        /**
          * cdsInputFocusIn event - focusin event from input
         */
        "onCdsInputFocusIn"?: (event: CustomEvent<any>) => void;
        /**
          * cdsInputFocusOut event - focusout event in Input
         */
        "onCdsInputFocusOut"?: (event: CustomEvent<any>) => void;
        /**
          * Placeholder
         */
        "placeholder"?: string;
        /**
          * The input will look similar to a normal one, but is not editable and has no shadow
         */
        "readonly"?: boolean;
        /**
          * Required
         */
        "required"?: boolean;
        /**
          * Rounded
         */
        "rounded"?: boolean;
        /**
          * Size
         */
        "size"?: 'small' | 'normal' | 'medium' | 'large';
        /**
          * State
         */
        "state"?: 'hovered' | 'focused';
        /**
          * Removes the background, border, shadow, and horizontal padding
         */
        "static"?: boolean;
        /**
          * Type
         */
        "type"?: 'text' | 'number' | 'email' | 'password' | 'date';
        /**
          * Value
         */
        "value"?: string | number;
    }
    interface CdsListBlock {
        /**
          * Adds horizontal border between list-block-items
         */
        "border"?: true;
        /**
          * Icon alignment - left, right
         */
        "iconAlign"?: string;
        /**
          * Array of ListBlockItem ( text, icon, backgroundClass, textClass)
         */
        "listBlockItems"?: string;
    }
    interface CdsListBlockItem {
        /**
          * Background color - used to generate bulma class name ie. has-background-COLOUR
         */
        "backgroundColour"?: string;
        /**
          * Icon
         */
        "icon"?: iconProp;
        /**
          * Icon alignment - left, right
         */
        "iconAlign"?: string;
        /**
          * Id (for event emission)
         */
        "listBlockItemId"?: string;
        /**
          * Emit event on click of list item (only emitted if item is created via text prop)
         */
        "onListBlockItemClicked"?: (event: CustomEvent<any>) => void;
        /**
          * Text of list item
         */
        "text"?: string;
        /**
          * Text color class - used to generate bulma class name ie. has-text-COLOUR
         */
        "textColour"?: string;
    }
    interface CdsLoadingIndicator {
        /**
          * Blur Content: show loading spinner over content slot
         */
        "blurContent"?: boolean;
        /**
          * CSS Class
         */
        "class"?: string;
        /**
          * Color
         */
        "color"?: colorProp;
        /**
          * Fullscreen
         */
        "fullscreen"?: boolean;
        /**
          * Show
         */
        "show"?: boolean;
        /**
          * Size
         */
        "size"?: 'small' | 'normal' | 'medium' | 'large';
    }
    interface CdsLogo {
        /**
          * Logo's alignment
         */
        "alignment"?: string;
        /**
          * Logo's colour
         */
        "colour"?: string;
        /**
          * Logo's size
         */
        "size"?: 'small' | 'normal' | 'medium' | 'large' | 'extra-large';
    }
    interface CdsLottieAnimation {
        /**
          * Path to animation JSON file
         */
        "animationPath"?: string;
        /**
          * Autoplay option
         */
        "autoplay"?: boolean;
        /**
          * Height
         */
        "height"?: string;
        /**
          * Loop option
         */
        "loop"?: boolean;
        /**
          * Width
         */
        "width"?: string;
    }
    interface CdsMenu {
        /**
          * Active Subnav Item path
         */
        "activeItemPath"?: string;
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Subnav
         */
        "subnav"?: string;
    }
    interface CdsMessage {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Color
         */
        "color"?: colorProp;
        /**
          * Size
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface CdsModal {
        /**
          * Is Active
         */
        "active"?: boolean;
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Modal Card
         */
        "hasModalCard"?: boolean;
        /**
          * On Close
         */
        "onModalClosed"?: (event: CustomEvent<any>) => void;
    }
    interface CdsNavbar {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Color
         */
        "color"?: colorProp;
        /**
          * Fixed position
         */
        "fixedPosition"?: 'is-fixed-top' | 'is-fixed-bottom';
        /**
          * Logo Image
          * @imageUploader 
          * @imageMaxWidth 500px
          * @imageMaxHeight 500px
          * @imageMinWidth 300px
          * @imageMinHeight 300px
          * @imageExt .jpg, .png
         */
        "logoImage"?: string;
        /**
          * Logo Link
         */
        "logoLink"?: string;
        /**
          * Mobile Menu Open
         */
        "mobileMenuOpen"?: boolean;
        /**
          * Spaced
         */
        "spaced"?: boolean;
        /**
          * Transparent
         */
        "transparent"?: boolean;
    }
    interface CdsNavbarDropdown {
        /**
          * The dropdown visibility
         */
        "active"?: boolean;
        /**
          * Heading
         */
        "heading"?: string;
        /**
          * The dropdown will show up when hovering the dropdown-trigger
         */
        "hoverable"?: boolean;
        /**
          * Is Tab style
         */
        "isTab"?: boolean;
        /**
          * On Updated Event
         */
        "onUpdated"?: (event: CustomEvent<any>) => void;
        /**
          * Dropdown Position
         */
        "position"?: 'left' | 'right' | 'center';
        /**
          * Size
         */
        "size"?: 'normal' | 'large' | 'fullwidth';
    }
    interface CdsNavbarDropdownItem {
        /**
          * Description
         */
        "description"?: string;
        /**
          * Heading
         */
        "heading"?: string;
        /**
          * Icon
         */
        "icon"?: iconProp;
        /**
          * Icon Background Style
         */
        "iconBackgroundStyle"?: 'transparent' | 'solid' | 'light';
        /**
          * Icon Color
         */
        "iconColor"?: colorProp;
        /**
          * Layout
         */
        "layout"?: 'horizontal' | 'stack';
        /**
          * Heading
         */
        "link"?: string;
        /**
          * On Click Event
         */
        "onClicked"?: (event: CustomEvent<any>) => void;
    }
    interface CdsNotification {
        /**
          * Notification content alignment
         */
        "alignContent"?: 'left' | 'right' | 'center';
        /**
          * Notification position
         */
        "animated"?: string;
        /**
          * Bottom placement in pixels (default is 0px)
         */
        "bottomPosition"?: string;
        /**
          * Call to action label
         */
        "cta"?: string;
        /**
          * Call to action target
         */
        "ctaTarget"?: '_self' | '_blank' | 'emit';
        /**
          * Call to action type
         */
        "ctaType"?: notificationTypeProp;
        /**
          * Call to action URL
         */
        "ctaUrl"?: string;
        /**
          * Is dismissable
         */
        "dismissable"?: boolean;
        /**
          * Is dismissed
         */
        "dismissed"?: boolean;
        /**
          * Heading of the notification
         */
        "heading"?: string;
        /**
          * Heading icon (font awesome icon)
         */
        "icon"?: iconProp;
        /**
          * ID
         */
        "notificationId"?: string;
        /**
          * Notification type
         */
        "notificationType"?: notificationTypeProp;
        /**
          * Triggers when the user clicks on CTA
         */
        "onCtaClicked"?: (event: CustomEvent<any>) => void;
        /**
          * Triggers when the user selects the delete / close button
         */
        "onNotificationDismissed"?: (event: CustomEvent<any>) => void;
        /**
          * Notification position
         */
        "position"?: notificationPositionProp;
        /**
          * This reduces the heading size two levels on mobile viewports
         */
        "responsiveHeading"?: boolean;
        /**
          * Rounded Corners
         */
        "rounded"?: boolean;
        /**
          * Text of the notification
         */
        "text"?: string;
        /**
          * Display as a toast notification with appropriate accessibility attributes
         */
        "toast"?: boolean;
        /**
          * Top placement in pixels (default is 0px)
         */
        "topPosition"?: string;
    }
    interface CdsPagination {
        /**
          * Alignment
         */
        "align"?: 'centered' | 'right';
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Rounded
         */
        "rounded"?: boolean;
        /**
          * Pagination size
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface CdsPanel {
        /**
          * CSS Classes
         */
        "class"?: string;
    }
    interface CdsProgress {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Color
         */
        "color"?: colorProp;
        /**
          * Light
         */
        "light"?: boolean;
        /**
          * type
         */
        "lottiePath"?: string;
        /**
          * Maximum value
         */
        "max"?: number;
        /**
          * Size
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * type
         */
        "type"?: 'circle' | 'lottie' | 'bar';
        /**
          * Value
         */
        "value"?: number;
    }
    interface CdsQuote {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Footer
         */
        "footer"?: any;
    }
    interface CdsRadio {
        /**
          * Checked
         */
        "checked"?: boolean;
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Disabled
         */
        "disabled"?: boolean;
        /**
          * Label Classes
         */
        "labelClass"?: string;
        /**
          * cdsInputChange event, contains change from input
         */
        "onCdsInputChange"?: (event: CustomEvent<any>) => void;
        /**
          * cdsInputFocusIn event - focusin event from input
         */
        "onCdsInputFocusIn"?: (event: CustomEvent<any>) => void;
        /**
          * cdsInputFocusOut event - focusout event in Input
         */
        "onCdsInputFocusOut"?: (event: CustomEvent<any>) => void;
        /**
          * Id
         */
        "radioId"?: string;
        /**
          * Name
         */
        "radioName"?: string;
    }
    interface CdsRange {
        /**
          * label
         */
        "label"?: string;
        /**
          * max
         */
        "max"?: number;
        /**
          * min
         */
        "min"?: number;
        /**
          * On Change
         */
        "onChanged"?: (event: CustomEvent<any>) => void;
        /**
          * On Tick
         */
        "onTicked"?: (event: CustomEvent<any>) => void;
        /**
          * step
         */
        "step"?: number;
        /**
          * Value
         */
        "value"?: number;
    }
    interface CdsSection {
        /**
          * background
         */
        "background"?: colorProp;
        /**
          * CSS classes
         */
        "class"?: string;
        /**
          * Light
         */
        "light"?: boolean;
        /**
          * Section size
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface CdsSelect {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Color
         */
        "color"?: colorProp;
        /**
          * Control classes
         */
        "controlClass"?: string;
        /**
          * Icon
         */
        "icon"?: iconProp;
        /**
          * Label for select
         */
        "label"?: string;
        /**
          * Loading state
         */
        "loading"?: boolean;
        /**
          * Message
         */
        "message"?: string;
        /**
          * Allows multiple selection
         */
        "multiple"?: boolean;
        /**
          * cdsInputChange event, contains change from input
         */
        "onCdsSelectChange"?: (event: CustomEvent<any>) => void;
        /**
          * Rounded
         */
        "rounded"?: boolean;
        /**
          * Select id
         */
        "selectId"?: string;
        /**
          * Select name
         */
        "selectName"?: string;
        /**
          * Select status
         */
        "selectStatus"?: 'success' | 'danger';
        /**
          * Size
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * State
         */
        "state"?: 'hovered' | 'focused';
    }
    interface CdsSidebar {
        /**
          * Active Subnav Item path
         */
        "activeItemPath"?: string;
        /**
          * Logo href
         */
        "logoHref"?: string;
        /**
          * Logo image path
          * @imageUploader 
          * @imageMaxWidth 500px
          * @imageMaxHeight 500px
          * @imageMinWidth 300px
          * @imageMinHeight 300px
          * @imageExt .jpg, .png
         */
        "logoPath"?: string;
        /**
          * Slide out duration
         */
        "slideoutDuration"?: number;
        /**
          * Subnav
         */
        "subnav"?: string;
        /**
          * Title
         */
        "subnavTitle"?: string;
    }
    interface CdsSignIn {
        /**
          * button label
         */
        "buttonLabel"?: string;
        /**
          * CSS classes
         */
        "class"?: string;
        /**
          * control size
         */
        "controlSize"?: 'small' | 'normal' | 'medium' | 'large';
        /**
          * current Data
         */
        "currentData"?: SignInData;
        /**
          * forgot password label
         */
        "forgotPasswordLabel"?: string;
        /**
          * heading
         */
        "heading"?: string;
        /**
          * on forgot password clicked
         */
        "onForgotPasswordClicked"?: (event: CustomEvent<any>) => void;
        /**
          * on form submit
         */
        "onFormSubmit"?: (event: CustomEvent<any>) => void;
        /**
          * password label
         */
        "passwordLabel"?: string;
        /**
          * password placeholder
         */
        "passwordPlaceholder"?: string;
        /**
          * remember label
         */
        "rememberLabel"?: string;
        /**
          * size
         */
        "size"?: signInBoxSizeProps;
        /**
          * username label
         */
        "usernameLabel"?: string;
        /**
          * username placeholder
         */
        "usernamePlaceholder"?: string;
        /**
          * username type
         */
        "usernameType"?: 'email' | 'text' | 'number';
    }
    interface CdsSignInSeparator {
        /**
          * CSS classes
         */
        "class"?: string;
    }
    interface CdsSkeleton {
        /**
          * Display as a circle
         */
        "circle"?: boolean;
        /**
          * Base color
         */
        "color"?: string;
        /**
          * The number of times the skeleton element should be repeated
         */
        "count"?: number;
        /**
          * Animation duration
         */
        "duration"?: number;
        /**
          * Height
         */
        "height"?: string;
        /**
          * Highlight color
         */
        "highlightColor"?: string;
        /**
          * Display squared
         */
        "squared"?: boolean;
        /**
          * Width
         */
        "width"?: string;
    }
    interface CdsStats {
        /**
          * Align
         */
        "align"?: 'left' | 'right' | 'center';
        /**
          * CSS classes
         */
        "class"?: string;
        /**
          * Is No Border
         */
        "noBorder"?: boolean;
        /**
          * Simple Layout
         */
        "simple"?: boolean;
    }
    interface CdsStatsItem {
        /**
          * Align
         */
        "align"?: 'left' | 'right' | 'center';
        /**
          * CSS classes
         */
        "class"?: string;
        /**
          * Metric
         */
        "metric"?: string;
        /**
          * Metric Color
         */
        "metricColor"?: textColorProp;
        /**
          * Metric Sizes
         */
        "metricSize"?: typographySizeProp;
        /**
          * Align
         */
        "reversed"?: boolean;
        /**
          * Value Color
         */
        "valueColor"?: textColorProp;
        /**
          * Value Sizes
         */
        "valueSize"?: typographySizeProp;
    }
    interface CdsSwitch {
        /**
          * Switch is checked
         */
        "checked"?: boolean;
        /**
          * Switch is disabled
         */
        "disabled"?: boolean;
        /**
          * Name
         */
        "name"?: string;
        /**
          * cdsSwitchChange event, contains change from input
         */
        "onCdsSwitchChange"?: (event: CustomEvent<any>) => void;
        /**
          * Switch is triggered
         */
        "onSelectSwitch"?: (event: CustomEvent<any>) => void;
        /**
          * Is outlined
         */
        "outlined"?: boolean;
        /**
          * Size
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Unique id of the switch
         */
        "switchId"?: string;
    }
    interface CdsTable {
        /**
          * Bordered
         */
        "bordered"?: boolean;
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Fullwidth
         */
        "fullwidth"?: boolean;
        /**
          * Hoverable
         */
        "hoverable"?: boolean;
        /**
          * Narrow
         */
        "narrow"?: boolean;
        /**
          * Scrollable
         */
        "scrollable"?: boolean;
        /**
          * Striped
         */
        "striped"?: boolean;
    }
    interface CdsTabs {
        /**
          * Alignment
         */
        "align"?: 'centered' | 'right';
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Full width
         */
        "fullwidth"?: boolean;
        /**
          * Rounded
         */
        "rounded"?: boolean;
        /**
          * Pagination size
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Style
         */
        "tabStyle"?: 'boxed' | 'toggle';
    }
    interface CdsTag {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Color
         */
        "color"?: colorProp;
        /**
          * Is delete
         */
        "delete"?: boolean;
        /**
          * Link href
         */
        "href"?: string;
        /**
          * Is light color variant
         */
        "light"?: boolean;
        /**
          * Is rounded
         */
        "rounded"?: boolean;
        /**
          * Size
         */
        "size"?: 'normal' | 'medium' | 'large';
        /**
          * Tag
         */
        "tag"?: 'span' | 'div' | 'a' | 'button';
    }
    interface CdsTags {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Has addons
         */
        "hasAddons"?: boolean;
        /**
          * Size
         */
        "size"?: 'medium' | 'large';
    }
    interface CdsTextarea {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Control class
         */
        "controlClass"?: string;
        /**
          * Disabled state
         */
        "disabled"?: boolean;
        /**
          * Fixed size
         */
        "hasFixedSize"?: boolean;
        /**
          * Label
         */
        "label"?: string;
        /**
          * Loading state
         */
        "loading"?: boolean;
        /**
          * Message
         */
        "message"?: string;
        /**
          * cdsInput event - InputEvent from input
         */
        "onCdsInput"?: (event: CustomEvent<any>) => void;
        /**
          * cdsInputChange event, contains change from input
         */
        "onCdsTextareaChange"?: (event: CustomEvent<any>) => void;
        /**
          * Placeholder
         */
        "placeholder"?: string;
        /**
          * Readonly state
         */
        "readonly"?: boolean;
        /**
          * Rows
         */
        "rows"?: number;
        /**
          * Size
         */
        "size"?: 'small' | 'normal' | 'medium' | 'large';
        /**
          * State
         */
        "state"?: 'hovered' | 'focused';
        /**
          * Unique id (used in textarea and label)
         */
        "textareaId"?: string;
        /**
          * Name
         */
        "textareaName"?: string;
        /**
          * Text area status
         */
        "textareaStatus"?: 'success' | 'danger';
        /**
          * Value
         */
        "value"?: string | number;
    }
    interface CdsToast {
        /**
          * Toast in animation
         */
        "animateIn"?: string;
        /**
          * Toast out animation
         */
        "animateOut"?: string;
        /**
          * Duration before toast is removed
         */
        "duration"?: number;
        /**
          * Pause toast removal while hovered?
         */
        "pauseOnHover"?: boolean;
        /**
          * Position of toast notifications
         */
        "position"?: positionLocationsProp;
    }
    interface CdsTooltip {
        /**
          * CSS Classes
         */
        "class"?: string;
        /**
          * Tooltip color
         */
        "color"?: colorProp;
        /**
          * Tooltip offset
         */
        "offset"?: number;
        /**
          * Tooltip placement
         */
        "placement"?: tooltipPlacementProp;
        /**
          * Tooltip trigger
         */
        "trigger"?: tooltipTriggerProp;
    }
    interface CdsVideo {
        /**
          * Show video controls (not applicable to embedded video)
         */
        "controls"?: boolean;
        /**
          * Is embedded
         */
        "embedded"?: boolean;
        /**
          * Video ratio
         */
        "ratio"?: imageRatioProps;
        /**
          * Video url
         */
        "videoUrl"?: string;
    }
    interface IntrinsicElements {
        "cds-accordion": CdsAccordion;
        "cds-accordion-item": CdsAccordionItem;
        "cds-avatar": CdsAvatar;
        "cds-back-to-top": CdsBackToTop;
        "cds-banner": CdsBanner;
        "cds-box": CdsBox;
        "cds-brand-favicon": CdsBrandFavicon;
        "cds-brand-icon": CdsBrandIcon;
        "cds-brand-logo": CdsBrandLogo;
        "cds-breadcrumb": CdsBreadcrumb;
        "cds-button": CdsButton;
        "cds-buttons": CdsButtons;
        "cds-calendar": CdsCalendar;
        "cds-calendar-container": CdsCalendarContainer;
        "cds-calendar-content": CdsCalendarContent;
        "cds-calendar-input": CdsCalendarInput;
        "cds-card": CdsCard;
        "cds-card-content": CdsCardContent;
        "cds-card-footer": CdsCardFooter;
        "cds-card-grid": CdsCardGrid;
        "cds-card-header": CdsCardHeader;
        "cds-card-image": CdsCardImage;
        "cds-carousel": CdsCarousel;
        "cds-checkbox": CdsCheckbox;
        "cds-column": CdsColumn;
        "cds-columns": CdsColumns;
        "cds-container": CdsContainer;
        "cds-content": CdsContent;
        "cds-cookie-consent": CdsCookieConsent;
        "cds-divider": CdsDivider;
        "cds-dropdown": CdsDropdown;
        "cds-feature": CdsFeature;
        "cds-feature-header": CdsFeatureHeader;
        "cds-feature-item": CdsFeatureItem;
        "cds-field": CdsField;
        "cds-file": CdsFile;
        "cds-file-input": CdsFileInput;
        "cds-footer": CdsFooter;
        "cds-grid": CdsGrid;
        "cds-grid-item": CdsGridItem;
        "cds-heading": CdsHeading;
        "cds-hero": CdsHero;
        "cds-icon": CdsIcon;
        "cds-image": CdsImage;
        "cds-input": CdsInput;
        "cds-list-block": CdsListBlock;
        "cds-list-block-item": CdsListBlockItem;
        "cds-loading-indicator": CdsLoadingIndicator;
        "cds-logo": CdsLogo;
        "cds-lottie-animation": CdsLottieAnimation;
        "cds-menu": CdsMenu;
        "cds-message": CdsMessage;
        "cds-modal": CdsModal;
        "cds-navbar": CdsNavbar;
        "cds-navbar-dropdown": CdsNavbarDropdown;
        "cds-navbar-dropdown-item": CdsNavbarDropdownItem;
        "cds-notification": CdsNotification;
        "cds-pagination": CdsPagination;
        "cds-panel": CdsPanel;
        "cds-progress": CdsProgress;
        "cds-quote": CdsQuote;
        "cds-radio": CdsRadio;
        "cds-range": CdsRange;
        "cds-section": CdsSection;
        "cds-select": CdsSelect;
        "cds-sidebar": CdsSidebar;
        "cds-sign-in": CdsSignIn;
        "cds-sign-in-separator": CdsSignInSeparator;
        "cds-skeleton": CdsSkeleton;
        "cds-stats": CdsStats;
        "cds-stats-item": CdsStatsItem;
        "cds-switch": CdsSwitch;
        "cds-table": CdsTable;
        "cds-tabs": CdsTabs;
        "cds-tag": CdsTag;
        "cds-tags": CdsTags;
        "cds-textarea": CdsTextarea;
        "cds-toast": CdsToast;
        "cds-tooltip": CdsTooltip;
        "cds-video": CdsVideo;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cds-accordion": LocalJSX.CdsAccordion & JSXBase.HTMLAttributes<HTMLCdsAccordionElement>;
            "cds-accordion-item": LocalJSX.CdsAccordionItem & JSXBase.HTMLAttributes<HTMLCdsAccordionItemElement>;
            "cds-avatar": LocalJSX.CdsAvatar & JSXBase.HTMLAttributes<HTMLCdsAvatarElement>;
            "cds-back-to-top": LocalJSX.CdsBackToTop & JSXBase.HTMLAttributes<HTMLCdsBackToTopElement>;
            "cds-banner": LocalJSX.CdsBanner & JSXBase.HTMLAttributes<HTMLCdsBannerElement>;
            "cds-box": LocalJSX.CdsBox & JSXBase.HTMLAttributes<HTMLCdsBoxElement>;
            "cds-brand-favicon": LocalJSX.CdsBrandFavicon & JSXBase.HTMLAttributes<HTMLCdsBrandFaviconElement>;
            "cds-brand-icon": LocalJSX.CdsBrandIcon & JSXBase.HTMLAttributes<HTMLCdsBrandIconElement>;
            "cds-brand-logo": LocalJSX.CdsBrandLogo & JSXBase.HTMLAttributes<HTMLCdsBrandLogoElement>;
            "cds-breadcrumb": LocalJSX.CdsBreadcrumb & JSXBase.HTMLAttributes<HTMLCdsBreadcrumbElement>;
            "cds-button": LocalJSX.CdsButton & JSXBase.HTMLAttributes<HTMLCdsButtonElement>;
            "cds-buttons": LocalJSX.CdsButtons & JSXBase.HTMLAttributes<HTMLCdsButtonsElement>;
            "cds-calendar": LocalJSX.CdsCalendar & JSXBase.HTMLAttributes<HTMLCdsCalendarElement>;
            "cds-calendar-container": LocalJSX.CdsCalendarContainer & JSXBase.HTMLAttributes<HTMLCdsCalendarContainerElement>;
            "cds-calendar-content": LocalJSX.CdsCalendarContent & JSXBase.HTMLAttributes<HTMLCdsCalendarContentElement>;
            "cds-calendar-input": LocalJSX.CdsCalendarInput & JSXBase.HTMLAttributes<HTMLCdsCalendarInputElement>;
            "cds-card": LocalJSX.CdsCard & JSXBase.HTMLAttributes<HTMLCdsCardElement>;
            "cds-card-content": LocalJSX.CdsCardContent & JSXBase.HTMLAttributes<HTMLCdsCardContentElement>;
            "cds-card-footer": LocalJSX.CdsCardFooter & JSXBase.HTMLAttributes<HTMLCdsCardFooterElement>;
            "cds-card-grid": LocalJSX.CdsCardGrid & JSXBase.HTMLAttributes<HTMLCdsCardGridElement>;
            "cds-card-header": LocalJSX.CdsCardHeader & JSXBase.HTMLAttributes<HTMLCdsCardHeaderElement>;
            "cds-card-image": LocalJSX.CdsCardImage & JSXBase.HTMLAttributes<HTMLCdsCardImageElement>;
            "cds-carousel": LocalJSX.CdsCarousel & JSXBase.HTMLAttributes<HTMLCdsCarouselElement>;
            "cds-checkbox": LocalJSX.CdsCheckbox & JSXBase.HTMLAttributes<HTMLCdsCheckboxElement>;
            "cds-column": LocalJSX.CdsColumn & JSXBase.HTMLAttributes<HTMLCdsColumnElement>;
            "cds-columns": LocalJSX.CdsColumns & JSXBase.HTMLAttributes<HTMLCdsColumnsElement>;
            "cds-container": LocalJSX.CdsContainer & JSXBase.HTMLAttributes<HTMLCdsContainerElement>;
            "cds-content": LocalJSX.CdsContent & JSXBase.HTMLAttributes<HTMLCdsContentElement>;
            "cds-cookie-consent": LocalJSX.CdsCookieConsent & JSXBase.HTMLAttributes<HTMLCdsCookieConsentElement>;
            "cds-divider": LocalJSX.CdsDivider & JSXBase.HTMLAttributes<HTMLCdsDividerElement>;
            "cds-dropdown": LocalJSX.CdsDropdown & JSXBase.HTMLAttributes<HTMLCdsDropdownElement>;
            "cds-feature": LocalJSX.CdsFeature & JSXBase.HTMLAttributes<HTMLCdsFeatureElement>;
            "cds-feature-header": LocalJSX.CdsFeatureHeader & JSXBase.HTMLAttributes<HTMLCdsFeatureHeaderElement>;
            "cds-feature-item": LocalJSX.CdsFeatureItem & JSXBase.HTMLAttributes<HTMLCdsFeatureItemElement>;
            "cds-field": LocalJSX.CdsField & JSXBase.HTMLAttributes<HTMLCdsFieldElement>;
            "cds-file": LocalJSX.CdsFile & JSXBase.HTMLAttributes<HTMLCdsFileElement>;
            "cds-file-input": LocalJSX.CdsFileInput & JSXBase.HTMLAttributes<HTMLCdsFileInputElement>;
            "cds-footer": LocalJSX.CdsFooter & JSXBase.HTMLAttributes<HTMLCdsFooterElement>;
            "cds-grid": LocalJSX.CdsGrid & JSXBase.HTMLAttributes<HTMLCdsGridElement>;
            "cds-grid-item": LocalJSX.CdsGridItem & JSXBase.HTMLAttributes<HTMLCdsGridItemElement>;
            "cds-heading": LocalJSX.CdsHeading & JSXBase.HTMLAttributes<HTMLCdsHeadingElement>;
            "cds-hero": LocalJSX.CdsHero & JSXBase.HTMLAttributes<HTMLCdsHeroElement>;
            "cds-icon": LocalJSX.CdsIcon & JSXBase.HTMLAttributes<HTMLCdsIconElement>;
            "cds-image": LocalJSX.CdsImage & JSXBase.HTMLAttributes<HTMLCdsImageElement>;
            "cds-input": LocalJSX.CdsInput & JSXBase.HTMLAttributes<HTMLCdsInputElement>;
            "cds-list-block": LocalJSX.CdsListBlock & JSXBase.HTMLAttributes<HTMLCdsListBlockElement>;
            "cds-list-block-item": LocalJSX.CdsListBlockItem & JSXBase.HTMLAttributes<HTMLCdsListBlockItemElement>;
            "cds-loading-indicator": LocalJSX.CdsLoadingIndicator & JSXBase.HTMLAttributes<HTMLCdsLoadingIndicatorElement>;
            "cds-logo": LocalJSX.CdsLogo & JSXBase.HTMLAttributes<HTMLCdsLogoElement>;
            "cds-lottie-animation": LocalJSX.CdsLottieAnimation & JSXBase.HTMLAttributes<HTMLCdsLottieAnimationElement>;
            "cds-menu": LocalJSX.CdsMenu & JSXBase.HTMLAttributes<HTMLCdsMenuElement>;
            "cds-message": LocalJSX.CdsMessage & JSXBase.HTMLAttributes<HTMLCdsMessageElement>;
            "cds-modal": LocalJSX.CdsModal & JSXBase.HTMLAttributes<HTMLCdsModalElement>;
            "cds-navbar": LocalJSX.CdsNavbar & JSXBase.HTMLAttributes<HTMLCdsNavbarElement>;
            "cds-navbar-dropdown": LocalJSX.CdsNavbarDropdown & JSXBase.HTMLAttributes<HTMLCdsNavbarDropdownElement>;
            "cds-navbar-dropdown-item": LocalJSX.CdsNavbarDropdownItem & JSXBase.HTMLAttributes<HTMLCdsNavbarDropdownItemElement>;
            "cds-notification": LocalJSX.CdsNotification & JSXBase.HTMLAttributes<HTMLCdsNotificationElement>;
            "cds-pagination": LocalJSX.CdsPagination & JSXBase.HTMLAttributes<HTMLCdsPaginationElement>;
            "cds-panel": LocalJSX.CdsPanel & JSXBase.HTMLAttributes<HTMLCdsPanelElement>;
            "cds-progress": LocalJSX.CdsProgress & JSXBase.HTMLAttributes<HTMLCdsProgressElement>;
            "cds-quote": LocalJSX.CdsQuote & JSXBase.HTMLAttributes<HTMLCdsQuoteElement>;
            "cds-radio": LocalJSX.CdsRadio & JSXBase.HTMLAttributes<HTMLCdsRadioElement>;
            "cds-range": LocalJSX.CdsRange & JSXBase.HTMLAttributes<HTMLCdsRangeElement>;
            "cds-section": LocalJSX.CdsSection & JSXBase.HTMLAttributes<HTMLCdsSectionElement>;
            "cds-select": LocalJSX.CdsSelect & JSXBase.HTMLAttributes<HTMLCdsSelectElement>;
            "cds-sidebar": LocalJSX.CdsSidebar & JSXBase.HTMLAttributes<HTMLCdsSidebarElement>;
            "cds-sign-in": LocalJSX.CdsSignIn & JSXBase.HTMLAttributes<HTMLCdsSignInElement>;
            "cds-sign-in-separator": LocalJSX.CdsSignInSeparator & JSXBase.HTMLAttributes<HTMLCdsSignInSeparatorElement>;
            "cds-skeleton": LocalJSX.CdsSkeleton & JSXBase.HTMLAttributes<HTMLCdsSkeletonElement>;
            "cds-stats": LocalJSX.CdsStats & JSXBase.HTMLAttributes<HTMLCdsStatsElement>;
            "cds-stats-item": LocalJSX.CdsStatsItem & JSXBase.HTMLAttributes<HTMLCdsStatsItemElement>;
            "cds-switch": LocalJSX.CdsSwitch & JSXBase.HTMLAttributes<HTMLCdsSwitchElement>;
            "cds-table": LocalJSX.CdsTable & JSXBase.HTMLAttributes<HTMLCdsTableElement>;
            "cds-tabs": LocalJSX.CdsTabs & JSXBase.HTMLAttributes<HTMLCdsTabsElement>;
            "cds-tag": LocalJSX.CdsTag & JSXBase.HTMLAttributes<HTMLCdsTagElement>;
            "cds-tags": LocalJSX.CdsTags & JSXBase.HTMLAttributes<HTMLCdsTagsElement>;
            "cds-textarea": LocalJSX.CdsTextarea & JSXBase.HTMLAttributes<HTMLCdsTextareaElement>;
            "cds-toast": LocalJSX.CdsToast & JSXBase.HTMLAttributes<HTMLCdsToastElement>;
            "cds-tooltip": LocalJSX.CdsTooltip & JSXBase.HTMLAttributes<HTMLCdsTooltipElement>;
            "cds-video": LocalJSX.CdsVideo & JSXBase.HTMLAttributes<HTMLCdsVideoElement>;
        }
    }
}
